seq_id,instruction,output,code,entry_point,testcase,formatted_prompt,generated_code,generated_text,passes_tests,label,mean_entropy,max_entropy,min_entropy,std_entropy,mean_max_prob,min_max_prob,std_max_prob,mean_confidence,min_confidence,mean_top2_ratio,mean_margin,residual_top5,residual_top10,sequence_length,prob_variance,entropy_variance,entropy_range,perplexity,mean_sharpness,has_syntax_keywords,has_parentheses,has_brackets,has_braces,indentation_consistency,word_repetition_ratio,attention_entropy,attention_variance
660113403,"Write a function to check if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward, ignoring spaces, punctuation, and capitalization.","Here is the code to solve this problem: 
```python
def is_palindrome(s):
    s = ''.join(c for c in s if c.isalnum()).lower()
    return s == s[::-1]
```","def is_palindrome(s):
    s = ''.join(c for c in s if c.isalnum()).lower()
    return s == s[::-1]",is_palindrome,"[assert is_palindrome(""No lemon, no melon"") == True, assert is_palindrome(""A man a plan a canal Panama"") == True, assert is_palindrome(""hello"") == False, assert is_palindrome(""racecar"") == True]","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a function to check if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward, ignoring spaces, punctuation, and capitalization.<|im_end|>
<|im_start|>assistant
","def is_palindrome(s):
    s = ''.join(c.lower() for c in s if c.isalnum())
    return s == s[::-1]","```python
def is_palindrome(s):
    s = ''.join(c.lower() for c in s if c.isalnum())
    return s == s[::-1]
```",True,0,0.0,-0.0,-0.0,0.0,1.0,1.0,0.0,1.0,1.0,100000000.0,1.0,0.0,0.0,36,0.0,0.0,0.0,1.0,-0.9999933838844299,1.0,1.0,1.0,0.0,1.0,0.25531914893617025,0.0,0.0
14192481277,Write a function to find the missing number in a given list of numbers ranging from 0 to n.,"Here is the code to solve this problem: 
```python
def missing_number(nums):
    n = len(nums)
    total = n * (n + 1) // 2
    sum_nums = sum(nums)
    return total - sum_nums
```","def missing_number(nums):
    n = len(nums)
    total = n * (n + 1) // 2
    sum_nums = sum(nums)
    return total - sum_nums",missing_number,"[assert missing_number([9,6,4,2,3,5,7,0,1])==8, assert missing_number([0,1])==2, assert missing_number([3,0,1])==2]","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a function to find the missing number in a given list of numbers ranging from 0 to n.<|im_end|>
<|im_start|>assistant
","def find_missing_number(nums):
    n = len(nums)
    total_sum = n * (n + 1) // 2
    return total_sum - sum(nums)","```python
def find_missing_number(nums):
    n = len(nums)
    total_sum = n * (n + 1) // 2
    return total_sum - sum(nums)
```",False,1,0.02984362113766554,0.6556860208511353,-0.0,0.13214192621816173,0.9848991952291349,0.6359981894493103,0.06775850827284279,0.9974988702642967,0.9450483640550564,95121951.33333638,0.9697983904582698,0.0,0.0,41,0.004591215443360904,0.017461488664646096,0.6556860208511353,1.0302934052447004,-0.9999931861714619,1.0,1.0,0.0,0.0,1.0,0.25,0.0,0.0
70726638201,Write a python function `max_subarray_sum` that finds the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has at least one positive number.,"Here is the code to solve this problem: 
```python
def max_subarray_sum(nums):
    if not nums:
        return 0

    current_sum = max_sum = nums[0]
    for num in nums[1:]:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    return max_sum
```","def max_subarray_sum(nums):
    if not nums:
        return 0

    current_sum = max_sum = nums[0]
    for num in nums[1:]:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    return max_sum",max_subarray_sum,"[assert max_subarray_sum([5,4,-1,7,8]) == 23, assert max_subarray_sum([1]) == 1, assert max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]) == 6]","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a python function `max_subarray_sum` that finds the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has at least one positive number.<|im_end|>
<|im_start|>assistant
","def max_subarray_sum(nums):
    max_current = max_global = nums[0]
    for num in nums[1:]:
        max_current = max(num, max_current + num)
        if max_current > max_global:
            max_global = max_current
    return max_global","```python
def max_subarray_sum(nums):
    max_current = max_global = nums[0]
    for num in nums[1:]:
        max_current = max(num, max_current + num)
        if max_current > max_global:
            max_global = max_current
    return max_global
```",True,0,0.014561042899177187,0.510796070098877,-0.0,0.08095047661308363,0.9944682083432637,0.7923726439476013,0.03112371253179296,0.998779670295036,0.9571912793721828,96825396.98277435,0.9889364157404218,0.0,0.0,63,0.0009686854817616863,0.006552979663885401,0.510796070098877,1.0146675713112459,-0.999993311980414,1.0,1.0,1.0,0.0,1.0,0.27083333333333337,0.0,0.0
893855581,"Given an array nums of n integers and an integer k, find the kth largest element in the array. Note that it is the kth largest element in the sorted order, not the kth distinct element.","Here is the code to solve this problem: 
```python
def kth_largest(nums, k):
    nums.sort()
    return nums[-k]
```","def kth_largest(nums, k):
    nums.sort()
    return nums[-k]",kth_largest,"[assert kth_largest([1,2], 1) == 2, assert kth_largest([3,2,3,1,2,4,5,5,6], 4) == 4, assert kth_largest([3,2,1,5,6,4], 2) == 5]","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Given an array nums of n integers and an integer k, find the kth largest element in the array. Note that it is the kth largest element in the sorted order, not the kth distinct element.<|im_end|>
<|im_start|>assistant
","def findKthLargest(nums, k):
    return sorted(nums)[-k]","```python
def findKthLargest(nums, k):
    return sorted(nums)[-k]
```",False,1,0.04749839956110174,0.667354166507721,-0.0,0.15642558667278733,0.9767108857631683,0.613071858882904,0.08353394623925549,0.9960192612353379,0.9440704818494224,90909091.29804017,0.9534217728809877,0.0,0.0,22,0.006977920174302826,0.024468964165925703,0.667354166507721,1.0486445228284573,-0.9999930804426019,1.0,1.0,1.0,0.0,1.0,0.25,0.0,0.0
20383247274,Write a function to generate the nth row of Pascal's triangle.,"Here is the code to solve this problem: 
```python
def pascal_row(n):
    row = [1]
    for i in range(1, n+1):
        row.append(row[i-1] * (n-i+1) // i)
    return row
```","def pascal_row(n):
    row = [1]
    for i in range(1, n+1):
        row.append(row[i-1] * (n-i+1) // i)
    return row",pascal_row,"[assert pascal_row(5) == [1, 5, 10, 10, 5, 1], assert pascal_row(4) == [1, 4, 6, 4, 1], assert pascal_row(3) == [1, 3, 3, 1]]","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a function to generate the nth row of Pascal's triangle.<|im_end|>
<|im_start|>assistant
","def pascals_triangle_row(n):
    if n == 0:
        return [1]
    row = [1]
    for i in range(1, n):
        row.append(row[i-1] * (n - i + 1) // i)
    row.append(1)
    return row","```python
def pascals_triangle_row(n):
    if n == 0:
        return [1]
    row = [1]
    for i in range(1, n):
        row.append(row[i-1] * (n - i + 1) // i)
    row.append(1)
    return row
```",False,1,0.05671695504390018,0.9608573317527771,-0.0,0.18312235508866437,0.97314938525079,0.5201849937438965,0.09217860778877505,0.9952466739165304,0.9194726124846023,90140845.49603133,0.9488930320236045,0.0,0.0,71,0.008496895733876821,0.03353379693321888,0.9608573317527771,1.0583562056109337,-0.999992998552994,1.0,1.0,1.0,0.0,1.0,0.24390243902439024,0.0,0.0
19434228727,"Write a function that checks if a given tree is a binary search tree.

A binary search tree has the property that all nodes in the left subtree of a node have values less than the node's value and all nodes in the right subtree have values greater than the node's value.","Here is the code to solve this problem: 
```python
def is_binary_search_tree(root, min_val=float('-inf'), max_val=float('inf')):
    if root is None:
        return True

    if not (root.val > min_val and root.val < max_val):
        return False

    return (is_binary_search_tree(root.left, min_val, root.val) and
            is_binary_search_tree(root.right, root.val, max_val))
```","def is_binary_search_tree(root, min_val=float('-inf'), max_val=float('inf')):
    if root is None:
        return True

    if not (root.val > min_val and root.val < max_val):
        return False

    return (is_binary_search_tree(root.left, min_val, root.val) and
            is_binary_search_tree(root.right, root.val, max_val))",is_binary_search_tree,"[    assert is_binary_search_tree(root3) == True,     root3.right.right = TreeNode(17),     root3.right.left = TreeNode(12),     root3.left.right = TreeNode(7),     root3.left.left = TreeNode(3),     root3.right = TreeNode(15),     root3.left = TreeNode(5),     root3 = TreeNode(10),     # Test case 3: A more complex binary search tree, ,     assert is_binary_search_tree(root2) == False,     root2.left.right = TreeNode(4),     root2.left.left = TreeNode(1),     root2.right = TreeNode(2),     root2.left = TreeNode(3),     root2 = TreeNode(5),     # Test case 2: A binary tree that is not a binary search tree, ,     assert is_binary_search_tree(root1) == True,     root1.left.right = TreeNode(4),     root1.left.left = TreeNode(2),     root1.right = TreeNode(7),     root1.left = TreeNode(3),     root1 = TreeNode(5),     # Test case 1: A simple binary search tree, ]","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a function that checks if a given tree is a binary search tree.

A binary search tree has the property that all nodes in the left subtree of a node have values less than the node's value and all nodes in the right subtree have values greater than the node's value.<|im_end|>
<|im_start|>assistant
","class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def is_valid_bst(root: TreeNode) -> bool:
    def validate(node, low=float('-inf'), high=float('inf')):
        if not node:
            return True
        if node.val <= low or node.val >= high:
            return False
        return (validate(node.left, low, node.val) and
                validate(node.right, node.val, high))
    
    return validate(root)","```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def is_valid_bst(root: TreeNode) -> bool:
    def validate(node, low=float('-inf'), high=float('inf')):
        if not node:
            return True
        if node.val <= low or node.val >= high:
            return False
        return (validate(node.left, low, node.val) and
                validate(node.right, node.val, high))
    
    return validate(root)
```",False,1,0.02268629574775696,1.0092310905456543,-0.0,0.12004326945489051,0.9904664487838745,0.500828742980957,0.053828140852310274,0.998098710319839,0.9154185117443974,96000000.17395668,0.9822453279495239,0.0,0.0,125,0.0028974687476161546,0.01441038654141945,1.0092310905456543,1.022945586827332,-0.9999932422637939,1.0,1.0,0.0,0.0,1.0,0.32413793103448274,0.0,0.0
