[
  {
    "seq_id": 660113403,
    "instruction": "Write a function to check if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward, ignoring spaces, punctuation, and capitalization.",
    "generated_text": "```python\ndef is_palindrome(s):\n    s = ''.join(c.lower() for c in s if c.isalnum())\n    return s == s[::-1]\n```",
    "generated_code": "def is_palindrome(s):\n    s = ''.join(c.lower() for c in s if c.isalnum())\n    return s == s[::-1]",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a function to check if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward, ignoring spaces, punctuation, and capitalization.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.0,
    "max_entropy": -0.0,
    "min_entropy": -0.0,
    "std_entropy": 0.0,
    "mean_confidence": 1.0,
    "min_confidence": 1.0,
    "std_confidence": 0.0,
    "mean_top5_conc": 1.0,
    "mean_top10_conc": 1.0,
    "min_top5_conc": 1.0,
    "sequence_length": 36,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": -0.0,
    "entropy_p75": 0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef is_palindrome(s):\n    s = ''.join(c for c in s if c.isalnum()).lower()\n    return s == s[::-1]\n```",
    "original_code": "def is_palindrome(s):\n    s = ''.join(c for c in s if c.isalnum()).lower()\n    return s == s[::-1]",
    "entry_point": "is_palindrome",
    "testcase": "[assert is_palindrome(\"No lemon, no melon\") == True, assert is_palindrome(\"A man a plan a canal Panama\") == True, assert is_palindrome(\"hello\") == False, assert is_palindrome(\"racecar\") == True]"
  },
  {
    "seq_id": 14192481277,
    "instruction": "Write a function to find the missing number in a given list of numbers ranging from 0 to n.",
    "generated_text": "```python\ndef find_missing_number(nums):\n    n = len(nums)\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum\n```",
    "generated_code": "def find_missing_number(nums):\n    n = len(nums)\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a function to find the missing number in a given list of numbers ranging from 0 to n.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.011831300954023996,
    "max_entropy": 0.5679024457931519,
    "min_entropy": -0.0,
    "std_entropy": 0.08111131281418389,
    "mean_confidence": 0.9946847669780254,
    "min_confidence": 0.744868814945221,
    "std_confidence": 0.03643940171930346,
    "mean_top5_conc": 1.0,
    "mean_top10_conc": 1.0,
    "min_top5_conc": 1.0,
    "sequence_length": 48,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": -0.0,
    "entropy_p75": 0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef missing_number(nums):\n    n = len(nums)\n    total = n * (n + 1) // 2\n    sum_nums = sum(nums)\n    return total - sum_nums\n```",
    "original_code": "def missing_number(nums):\n    n = len(nums)\n    total = n * (n + 1) // 2\n    sum_nums = sum(nums)\n    return total - sum_nums",
    "entry_point": "missing_number",
    "testcase": "[assert missing_number([9,6,4,2,3,5,7,0,1])==8, assert missing_number([0,1])==2, assert missing_number([3,0,1])==2]"
  },
  {
    "seq_id": 70726638201,
    "instruction": "Write a python function `max_subarray_sum` that finds the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has at least one positive number.",
    "generated_text": "```python\ndef max_subarray_sum(nums):\n    max_current = max_global = nums[0]\n    for i in range(1, len(nums)):\n        max_current = max(nums[i], max_current + nums[i])\n        if max_current > max_global:\n            max_global = max_current\n    return max_global\n```",
    "generated_code": "def max_subarray_sum(nums):\n    max_current = max_global = nums[0]\n    for i in range(1, len(nums)):\n        max_current = max(nums[i], max_current + nums[i])\n        if max_current > max_global:\n            max_global = max_current\n    return max_global",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a python function `max_subarray_sum` that finds the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has at least one positive number.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.013490377980120042,
    "max_entropy": 0.510796070098877,
    "min_entropy": -0.0,
    "std_entropy": 0.07801016983920726,
    "mean_confidence": 0.9948749577297884,
    "min_confidence": 0.7923726439476013,
    "std_confidence": 0.02999238596547565,
    "mean_top5_conc": 1.0,
    "mean_top10_conc": 1.0,
    "min_top5_conc": 1.0,
    "sequence_length": 68,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": -0.0,
    "entropy_p75": 0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef max_subarray_sum(nums):\n    if not nums:\n        return 0\n\n    current_sum = max_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```",
    "original_code": "def max_subarray_sum(nums):\n    if not nums:\n        return 0\n\n    current_sum = max_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
    "entry_point": "max_subarray_sum",
    "testcase": "[assert max_subarray_sum([5,4,-1,7,8]) == 23, assert max_subarray_sum([1]) == 1, assert max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]) == 6]"
  },
  {
    "seq_id": 893855581,
    "instruction": "Given an array nums of n integers and an integer k, find the kth largest element in the array. Note that it is the kth largest element in the sorted order, not the kth distinct element.",
    "generated_text": "```python\ndef findKthLargest(nums, k):\n    nums.sort()\n    return nums[-k]\n```",
    "generated_code": "def findKthLargest(nums, k):\n    nums.sort()\n    return nums[-k]",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nGiven an array nums of n integers and an integer k, find the kth largest element in the array. Note that it is the kth largest element in the sorted order, not the kth distinct element.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.04179859161376953,
    "max_entropy": 0.667354166507721,
    "min_entropy": -0.0,
    "std_entropy": 0.1475497624894126,
    "mean_confidence": 0.9795055794715881,
    "min_confidence": 0.613071858882904,
    "std_confidence": 0.07872639571004726,
    "mean_top5_conc": 1.0,
    "mean_top10_conc": 1.0,
    "min_top5_conc": 1.0,
    "sequence_length": 25,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": 0.0,
    "entropy_p75": 0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef kth_largest(nums, k):\n    nums.sort()\n    return nums[-k]\n```",
    "original_code": "def kth_largest(nums, k):\n    nums.sort()\n    return nums[-k]",
    "entry_point": "kth_largest",
    "testcase": "[assert kth_largest([1,2], 1) == 2, assert kth_largest([3,2,3,1,2,4,5,5,6], 4) == 4, assert kth_largest([3,2,1,5,6,4], 2) == 5]"
  },
  {
    "seq_id": 20383247274,
    "instruction": "Write a function to generate the nth row of Pascal's triangle.",
    "generated_text": "```python\ndef getRow(n):\n    row = [1]\n    for i in range(1, n + 1):\n        row = [x + y for x, y in zip([0] + row, row + [0])]\n    return row\n```",
    "generated_code": "def getRow(n):\n    row = [1]\n    for i in range(1, n + 1):\n        row = [x + y for x, y in zip([0] + row, row + [0])]\n    return row",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a function to generate the nth row of Pascal's triangle.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.03981887143954896,
    "max_entropy": 0.9608573317527771,
    "min_entropy": -0.0,
    "std_entropy": 0.17222056016982756,
    "mean_confidence": 0.9797789632228383,
    "min_confidence": 0.582931637763977,
    "std_confidence": 0.08635486507541919,
    "mean_top5_conc": 1.0,
    "mean_top10_conc": 1.0,
    "min_top5_conc": 1.0,
    "sequence_length": 57,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": 0.0,
    "entropy_p75": 0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef pascal_row(n):\n    row = [1]\n    for i in range(1, n+1):\n        row.append(row[i-1] * (n-i+1) // i)\n    return row\n```",
    "original_code": "def pascal_row(n):\n    row = [1]\n    for i in range(1, n+1):\n        row.append(row[i-1] * (n-i+1) // i)\n    return row",
    "entry_point": "pascal_row",
    "testcase": "[assert pascal_row(5) == [1, 5, 10, 10, 5, 1], assert pascal_row(4) == [1, 4, 6, 4, 1], assert pascal_row(3) == [1, 3, 3, 1]]"
  },
  {
    "seq_id": 19434228727,
    "instruction": "Write a function that checks if a given tree is a binary search tree.\n\nA binary search tree has the property that all nodes in the left subtree of a node have values less than the node's value and all nodes in the right subtree have values greater than the node's value.",
    "generated_text": "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_bst(node, lower=float('-inf'), upper=float('inf')):\n    if not node:\n        return True\n    if node.val <= lower or node.val >= upper:\n        return False\n    return (is_bst(node.left, lower, node.val) and\n            is_bst(node.right, node.val, upper))\n```",
    "generated_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_bst(node, lower=float('-inf'), upper=float('inf')):\n    if not node:\n        return True\n    if node.val <= lower or node.val >= upper:\n        return False\n    return (is_bst(node.left, lower, node.val) and\n            is_bst(node.right, node.val, upper))",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a function that checks if a given tree is a binary search tree.\n\nA binary search tree has the property that all nodes in the left subtree of a node have values less than the node's value and all nodes in the right subtree have values greater than the node's value.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.05303973012736866,
    "max_entropy": 1.212295651435852,
    "min_entropy": -0.0,
    "std_entropy": 0.1953073682432839,
    "mean_confidence": 0.9743585011788777,
    "min_confidence": 0.500828742980957,
    "std_confidence": 0.09734857894205899,
    "mean_top5_conc": 1.0,
    "mean_top10_conc": 1.0,
    "min_top5_conc": 1.0,
    "sequence_length": 112,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": -0.0,
    "entropy_p75": 0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef is_binary_search_tree(root, min_val=float('-inf'), max_val=float('inf')):\n    if root is None:\n        return True\n\n    if not (root.val > min_val and root.val < max_val):\n        return False\n\n    return (is_binary_search_tree(root.left, min_val, root.val) and\n            is_binary_search_tree(root.right, root.val, max_val))\n```",
    "original_code": "def is_binary_search_tree(root, min_val=float('-inf'), max_val=float('inf')):\n    if root is None:\n        return True\n\n    if not (root.val > min_val and root.val < max_val):\n        return False\n\n    return (is_binary_search_tree(root.left, min_val, root.val) and\n            is_binary_search_tree(root.right, root.val, max_val))",
    "entry_point": "is_binary_search_tree",
    "testcase": "[    assert is_binary_search_tree(root3) == True,     root3.right.right = TreeNode(17),     root3.right.left = TreeNode(12),     root3.left.right = TreeNode(7),     root3.left.left = TreeNode(3),     root3.right = TreeNode(15),     root3.left = TreeNode(5),     root3 = TreeNode(10),     # Test case 3: A more complex binary search tree, ,     assert is_binary_search_tree(root2) == False,     root2.left.right = TreeNode(4),     root2.left.left = TreeNode(1),     root2.right = TreeNode(2),     root2.left = TreeNode(3),     root2 = TreeNode(5),     # Test case 2: A binary tree that is not a binary search tree, ,     assert is_binary_search_tree(root1) == True,     root1.left.right = TreeNode(4),     root1.left.left = TreeNode(2),     root1.right = TreeNode(7),     root1.left = TreeNode(3),     root1 = TreeNode(5),     # Test case 1: A simple binary search tree, ]"
  },
  {
    "seq_id": 28755799726,
    "instruction": "Write a python function to find the missing number in a given list of integers that contains n distinct numbers taken from 0, 1, 2, ..., n. The function should have a time complexity of O(n) and space complexity of O(1).",
    "generated_text": "```python\ndef find_missing_number(nums):\n    n = len(nums)\n    total_sum = n * (n + 1) // 2\n    array_sum = sum(nums)\n    return total_sum - array_sum\n```",
    "generated_code": "def find_missing_number(nums):\n    n = len(nums)\n    total_sum = n * (n + 1) // 2\n    array_sum = sum(nums)\n    return total_sum - array_sum",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a python function to find the missing number in a given list of integers that contains n distinct numbers taken from 0, 1, 2, ..., n. The function should have a time complexity of O(n) and space complexity of O(1).<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.010932664076487223,
    "max_entropy": 0.5247678756713867,
    "min_entropy": -0.0,
    "std_entropy": 0.07495056877060886,
    "mean_confidence": 0.9954517570634683,
    "min_confidence": 0.7816843390464783,
    "std_confidence": 0.03118118261157512,
    "mean_top5_conc": 1.0,
    "mean_top10_conc": 1.0,
    "min_top5_conc": 1.0,
    "sequence_length": 48,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": -0.0,
    "entropy_p75": 0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef missing_number(nums):\n    n = len(nums)\n    total = n * (n + 1) // 2\n    sum_nums = sum(nums)\n    return total - sum_nums\n```",
    "original_code": "def missing_number(nums):\n    n = len(nums)\n    total = n * (n + 1) // 2\n    sum_nums = sum(nums)\n    return total - sum_nums",
    "entry_point": "missing_number",
    "testcase": "[assert missing_number([9,6,4,2,3,5,7,0,1]) == 8, assert missing_number([0, 1]) == 2, assert missing_number([3, 0, 1]) == 2]"
  },
  {
    "seq_id": 70726596281,
    "instruction": "Write a python function to check if a given string is a palindrome or not. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward.",
    "generated_text": "```python\ndef is_palindrome(s):\n    return s == s[::-1]\n```",
    "generated_code": "def is_palindrome(s):\n    return s == s[::-1]",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a python function to check if a given string is a palindrome or not. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.03149879919855218,
    "max_entropy": 0.5984771847724915,
    "min_entropy": -0.0,
    "std_entropy": 0.13363808707517785,
    "mean_confidence": 0.9849504734340467,
    "min_confidence": 0.7140589952468872,
    "std_confidence": 0.06384973373059608,
    "mean_top5_conc": 1.0,
    "mean_top10_conc": 1.0,
    "min_top5_conc": 1.0,
    "sequence_length": 19,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": -0.0,
    "entropy_p75": -0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef is_palindrome(s):\n    return s == s[::-1]\n```",
    "original_code": "def is_palindrome(s):\n    return s == s[::-1]",
    "entry_point": "is_palindrome",
    "testcase": "[assert is_palindrome(\"12345\") == False, assert is_palindrome(\"123321\") == True, assert is_palindrome(\"12321\") == True, assert is_palindrome(\"level\") == True, assert is_palindrome(\"python\") == False, assert is_palindrome(\"racecar\") == True]"
  },
  {
    "seq_id": 32279616255,
    "instruction": "Write a function to check if a given list of integers is sorted in ascending order and all elements are unique.",
    "generated_text": "```python\ndef is_sorted_and_unique(lst):\n    return lst == sorted(lst) and len(lst) == len(set(lst))\n```",
    "generated_code": "def is_sorted_and_unique(lst):\n    return lst == sorted(lst) and len(lst) == len(set(lst))",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a function to check if a given list of integers is sorted in ascending order and all elements are unique.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.019306781036513194,
    "max_entropy": 0.5405898690223694,
    "min_entropy": -0.0,
    "std_entropy": 0.1003209770575445,
    "mean_confidence": 0.9917467896427427,
    "min_confidence": 0.7689101099967957,
    "std_confidence": 0.042884938992969975,
    "mean_top5_conc": 1.0,
    "mean_top10_conc": 1.0,
    "min_top5_conc": 1.0,
    "sequence_length": 28,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": -0.0,
    "entropy_p75": 0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef check_sorted_unique(test_list):\n    return test_list == sorted(set(test_list))\n```",
    "original_code": "def check_sorted_unique(test_list):\n    return test_list == sorted(set(test_list))",
    "entry_point": "check_sorted_unique",
    "testcase": "[assert check_sorted_unique([1, 3, 5, 7, 9]) == True, assert check_sorted_unique([5, 4, 3, 2, 1]) == False, assert check_sorted_unique([1, 2, 2, 4, 5]) == False, assert check_sorted_unique([1, 2, 3, 4, 5]) == True]"
  },
  {
    "seq_id": 12120976763,
    "instruction": "Write a python function to find the length of the longest substring without repeating characters in a given string.",
    "generated_text": "```python\ndef length_of_longest_substring(s: str) -> int:\n    char_index_map = {}\n    start = 0\n    max_length = 0\n    \n    for end in range(len(s)):\n        if s[end] in char_index_map and char_index_map[s[end]] >= start:\n            start = char_index_map[s[end]] + 1\n        char_index_map[s[end]] = end\n        max_length = max(max_length, end - start + 1)\n    \n    return max_length\n```",
    "generated_code": "def length_of_longest_substring(s: str) -> int:\n    char_index_map = {}\n    start = 0\n    max_length = 0\n    \n    for end in range(len(s)):\n        if s[end] in char_index_map and char_index_map[s[end]] >= start:\n            start = char_index_map[s[end]] + 1\n        char_index_map[s[end]] = end\n        max_length = max(max_length, end - start + 1)\n    \n    return max_length",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a python function to find the length of the longest substring without repeating characters in a given string.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.012340483315494082,
    "max_entropy": 0.5652978420257568,
    "min_entropy": -0.0,
    "std_entropy": 0.07471147293163051,
    "mean_confidence": 0.9952536755745564,
    "min_confidence": 0.7472854256629944,
    "std_confidence": 0.029803585409854498,
    "mean_top5_conc": 0.9999999994531684,
    "mean_top10_conc": 0.9999999994531684,
    "min_top5_conc": 0.9999999403953552,
    "sequence_length": 109,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": 0.0,
    "entropy_p75": 0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef length_of_longest_substring(s):\n    if not s:\n        return 0\n    char_map = {}\n    left = 0\n    max_length = 0\n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n    return max_length\n```",
    "original_code": "def length_of_longest_substring(s):\n    if not s:\n        return 0\n    char_map = {}\n    left = 0\n    max_length = 0\n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n    return max_length",
    "entry_point": "length_of_longest_substring",
    "testcase": "[assert length_of_longest_substring(\" \") == 1, assert length_of_longest_substring(\"\") == 0, assert length_of_longest_substring(\"pwwkew\") == 3, assert length_of_longest_substring(\"bbbbb\") == 1, assert length_of_longest_substring(\"abcabcbb\") == 3]"
  },
  {
    "seq_id": 18874307847,
    "instruction": "Create a function that takes a string as an input and returns a list of unique characters in the string in the order they appear.",
    "generated_text": "```python\ndef unique_characters(s):\n    seen = set()\n    result = []\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n            result.append(char)\n    return result\n```",
    "generated_code": "def unique_characters(s):\n    seen = set()\n    result = []\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n            result.append(char)\n    return result",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nCreate a function that takes a string as an input and returns a list of unique characters in the string in the order they appear.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.0,
    "max_entropy": -0.0,
    "min_entropy": -0.0,
    "std_entropy": 0.0,
    "mean_confidence": 1.0,
    "min_confidence": 1.0,
    "std_confidence": 0.0,
    "mean_top5_conc": 1.0,
    "mean_top10_conc": 1.0,
    "min_top5_conc": 1.0,
    "sequence_length": 46,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": 0.0,
    "entropy_p75": -0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef unique_char_in_order(input_str):\n    unique_chars = []\n    for char in input_str:\n        if char not in unique_chars:\n            unique_chars.append(char)\n    return unique_chars\n```",
    "original_code": "def unique_char_in_order(input_str):\n    unique_chars = []\n    for char in input_str:\n        if char not in unique_chars:\n            unique_chars.append(char)\n    return unique_chars",
    "entry_point": "unique_char_in_order",
    "testcase": "[assert unique_char_in_order(\"banana\") == ['b', 'a', 'n'], assert unique_char_in_order(\"apple\") == ['a', 'p', 'l', 'e'], assert unique_char_in_order(\"google\") == ['g', 'o', 'l', 'e']]"
  },
  {
    "seq_id": 44289869161,
    "instruction": "Write a function to find the longest substring without repeating characters in a given string.",
    "generated_text": "```python\ndef longest_unique_substring(s: str) -> int:\n    char_index_map = {}\n    start = max_length = 0\n    \n    for end, char in enumerate(s):\n        if char in char_index_map and char_index_map[char] >= start:\n            start = char_index_map[char] + 1\n        char_index_map[char] = end\n        max_length = max(max_length, end - start + 1)\n    \n    return max_length\n```",
    "generated_code": "def longest_unique_substring(s: str) -> int:\n    char_index_map = {}\n    start = max_length = 0\n    \n    for end, char in enumerate(s):\n        if char in char_index_map and char_index_map[char] >= start:\n            start = char_index_map[char] + 1\n        char_index_map[char] = end\n        max_length = max(max_length, end - start + 1)\n    \n    return max_length",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a function to find the longest substring without repeating characters in a given string.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.03756774977000073,
    "max_entropy": 0.6858594417572021,
    "min_entropy": -0.0,
    "std_entropy": 0.13951768703617798,
    "mean_confidence": 0.9821559865065296,
    "min_confidence": 0.5602911710739136,
    "std_confidence": 0.0713320944696488,
    "mean_top5_conc": 0.9999999987958658,
    "mean_top10_conc": 0.9999999987958658,
    "min_top5_conc": 0.9999999403953552,
    "sequence_length": 99,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": -0.0,
    "entropy_p75": -0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef longest_substring_without_repeating_characters(s):\n    char_set = set()\n    left = 0\n    max_length = 0\n    max_substring = \"\"\n    for right in range(len(s)):\n        while s[right] in char_set:\n            char_set.remove(s[left])\n            left += 1\n        char_set.add(s[right])\n        if (right - left + 1) > max_length:\n            max_length = right - left + 1\n            max_substring = s[left:right+1]\n    return max_substring\n```",
    "original_code": "def longest_substring_without_repeating_characters(s):\n    char_set = set()\n    left = 0\n    max_length = 0\n    max_substring = \"\"\n    for right in range(len(s)):\n        while s[right] in char_set:\n            char_set.remove(s[left])\n            left += 1\n        char_set.add(s[right])\n        if (right - left + 1) > max_length:\n            max_length = right - left + 1\n            max_substring = s[left:right+1]\n    return max_substring",
    "entry_point": "longest_substring_without_repeating_characters",
    "testcase": "[assert longest_substring_without_repeating_characters(\"pwwkew\")==\"wke\", assert longest_substring_without_repeating_characters(\"bbbbb\")==\"b\", assert longest_substring_without_repeating_characters(\"abcabcbb\")==\"abc\"]"
  },
  {
    "seq_id": 72740153081,
    "instruction": "Write a function to find the largest continuous sum in an array.",
    "generated_text": "```python\ndef max_continuous_sum(arr):\n    max_sum = current_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```",
    "generated_code": "def max_continuous_sum(arr):\n    max_sum = current_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a function to find the largest continuous sum in an array.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.03872938043084638,
    "max_entropy": 0.6524703502655029,
    "min_entropy": -0.0,
    "std_entropy": 0.14454131648377738,
    "mean_confidence": 0.9815550364297012,
    "min_confidence": 0.6416372656822205,
    "std_confidence": 0.07128810095167573,
    "mean_top5_conc": 0.9999999989723337,
    "mean_top10_conc": 0.9999999989723337,
    "min_top5_conc": 0.9999999403953552,
    "sequence_length": 58,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": 0.0,
    "entropy_p75": -0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef largest_continuous_sum(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_sum = current_sum = arr[0]\n\n    for num in arr[1:]:\n        current_sum = max(current_sum + num, num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n```",
    "original_code": "def largest_continuous_sum(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_sum = current_sum = arr[0]\n\n    for num in arr[1:]:\n        current_sum = max(current_sum + num, num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum",
    "entry_point": "largest_continuous_sum",
    "testcase": "[assert largest_continuous_sum([-1, 1]) == 1, assert largest_continuous_sum([1, 2, -1, 3, 4, -1]) == 9, assert largest_continuous_sum([1, 2, -1, 3, 4, 10, 10, -10, -1]) == 29]"
  },
  {
    "seq_id": 25369038617,
    "instruction": "Write a function to check if a word is a palindrome.\n\nA palindrome is a word that reads the same backward as forward, e.g., \"madam\" or \"racecar\".",
    "generated_text": "```python\ndef is_palindrome(word):\n    return word == word[::-1]\n```",
    "generated_code": "def is_palindrome(word):\n    return word == word[::-1]",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a function to check if a word is a palindrome.\n\nA palindrome is a word that reads the same backward as forward, e.g., \"madam\" or \"racecar\".<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.0,
    "max_entropy": -0.0,
    "min_entropy": -0.0,
    "std_entropy": 0.0,
    "mean_confidence": 1.0,
    "min_confidence": 1.0,
    "std_confidence": 0.0,
    "mean_top5_conc": 1.0,
    "mean_top10_conc": 1.0,
    "min_top5_conc": 1.0,
    "sequence_length": 19,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": -0.0,
    "entropy_p75": -0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef is_palindrome(word):\n    return word == word[::-1]\n```",
    "original_code": "def is_palindrome(word):\n    return word == word[::-1]",
    "entry_point": "is_palindrome",
    "testcase": "[assert is_palindrome(\"world\") == False, assert is_palindrome(\"level\") == True, assert is_palindrome(\"hello\") == False, assert is_palindrome(\"madam\") == True, assert is_palindrome(\"racecar\") == True]"
  },
  {
    "seq_id": 1281915040,
    "instruction": "Write a python function to find the total number of ways to reach the top of a staircase if you can climb either 1 or 2 steps at a time.",
    "generated_text": "```python\ndef count_ways(n):\n    if n <= 1:\n        return n\n    a, b = 1, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n```",
    "generated_code": "def count_ways(n):\n    if n <= 1:\n        return n\n    a, b = 1, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a python function to find the total number of ways to reach the top of a staircase if you can climb either 1 or 2 steps at a time.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.05569885548998098,
    "max_entropy": 0.6900216341018677,
    "min_entropy": -0.0,
    "std_entropy": 0.1721468330314686,
    "mean_confidence": 0.9714178227987446,
    "min_confidence": 0.5395111441612244,
    "std_confidence": 0.094518675123322,
    "mean_top5_conc": 0.9999999990228747,
    "mean_top10_conc": 0.9999999990228747,
    "min_top5_conc": 0.9999999403953552,
    "sequence_length": 61,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": 0.0,
    "entropy_p75": 0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef climb_Stairs(n):\n    a, b = 1, 2\n    for _ in range(3, n + 1):\n        a, b = b, a + b\n    return b if n > 1 else n\n```",
    "original_code": "def climb_Stairs(n):\n    a, b = 1, 2\n    for _ in range(3, n + 1):\n        a, b = b, a + b\n    return b if n > 1 else n",
    "entry_point": "climb_Stairs",
    "testcase": "[assert climb_Stairs(4) == 5, assert climb_Stairs(5) == 8, assert climb_Stairs(3) == 3]"
  },
  {
    "seq_id": 21969432676,
    "instruction": "Write a function to generate all possible permutations of a given list of numbers.",
    "generated_text": "```python\ndef permute(nums):\n    def backtrack(start):\n        if start == len(nums):\n            result.append(nums[:])\n        for i in range(start, len(nums)):\n            nums[start], nums[i] = nums[i], nums[start]\n            backtrack(start + 1)\n            nums[start], nums[i] = nums[i], nums[start]\n    \n    result = []\n    backtrack(0)\n    return result\n```",
    "generated_code": "def permute(nums):\n    def backtrack(start):\n        if start == len(nums):\n            result.append(nums[:])\n        for i in range(start, len(nums)):\n            nums[start], nums[i] = nums[i], nums[start]\n            backtrack(start + 1)\n            nums[start], nums[i] = nums[i], nums[start]\n    \n    result = []\n    backtrack(0)\n    return result",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a function to generate all possible permutations of a given list of numbers.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.027955591678619385,
    "max_entropy": 0.636696457862854,
    "min_entropy": -0.0,
    "std_entropy": 0.11599428939953069,
    "mean_confidence": 0.9882648552971325,
    "min_confidence": 0.6664035320281982,
    "std_confidence": 0.051277485291924614,
    "mean_top5_conc": 1.0,
    "mean_top10_conc": 1.0,
    "min_top5_conc": 1.0,
    "sequence_length": 87,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": -0.0,
    "entropy_p75": -0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef generate_permutations(nums):\n    if len(nums) == 1:\n        return [nums]\n    permutations = []\n    for i in range(len(nums)):\n        current_num = nums[i]\n        remaining_nums = nums[:i] + nums[i+1:]\n        sub_permutations = generate_permutations(remaining_nums)\n        for sub_permutation in sub_permutations:\n            permutations.append([current_num] + sub_permutation)\n    return permutations\n```",
    "original_code": "def generate_permutations(nums):\n    if len(nums) == 1:\n        return [nums]\n    permutations = []\n    for i in range(len(nums)):\n        current_num = nums[i]\n        remaining_nums = nums[:i] + nums[i+1:]\n        sub_permutations = generate_permutations(remaining_nums)\n        for sub_permutation in sub_permutations:\n            permutations.append([current_num] + sub_permutation)\n    return permutations",
    "entry_point": "generate_permutations",
    "testcase": "[assert generate_permutations([1]) == [[1]], assert generate_permutations([1, 2]) == [[1, 2], [2, 1]], assert generate_permutations([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]]"
  },
  {
    "seq_id": 24485454232,
    "instruction": "Write a python function to find the Fibonacci sequence up to n numbers.",
    "generated_text": "```python\ndef fibonacci_sequence(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    \n    fib_seq = [0, 1]\n    for i in range(2, n):\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    \n    return fib_seq\n```",
    "generated_code": "def fibonacci_sequence(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    \n    fib_seq = [0, 1]\n    for i in range(2, n):\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    \n    return fib_seq",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a python function to find the Fibonacci sequence up to n numbers.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.03395695951249864,
    "max_entropy": 0.6863582134246826,
    "min_entropy": -0.0,
    "std_entropy": 0.1406458943595741,
    "mean_confidence": 0.9823780298233032,
    "min_confidence": 0.5581962466239929,
    "std_confidence": 0.07486172296633065,
    "mean_top5_conc": 1.0000000013245476,
    "mean_top10_conc": 1.0000000013245476,
    "min_top5_conc": 1.0,
    "sequence_length": 90,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": 0.0,
    "entropy_p75": -0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef fibonacci(n):\n  fib_sequence = [0, 1]\n  while len(fib_sequence) < n:\n    fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n  return fib_sequence\n```",
    "original_code": "def fibonacci(n):\n  fib_sequence = [0, 1]\n  while len(fib_sequence) < n:\n    fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n  return fib_sequence",
    "entry_point": "fibonacci",
    "testcase": "[assert fibonacci(10) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34], assert fibonacci(8) == [0, 1, 1, 2, 3, 5, 8, 13], assert fibonacci(5) == [0, 1, 1, 2, 3]]"
  },
  {
    "seq_id": 73965182520,
    "instruction": "Write a function that checks if a given string is a palindrome, considering only alphanumeric characters and ignoring cases.",
    "generated_text": "```python\ndef is_palindrome(s: str) -> bool:\n    filtered_chars = [char.lower() for char in s if char.isalnum()]\n    return filtered_chars == filtered_chars[::-1]\n```",
    "generated_code": "def is_palindrome(s: str) -> bool:\n    filtered_chars = [char.lower() for char in s if char.isalnum()]\n    return filtered_chars == filtered_chars[::-1]",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a function that checks if a given string is a palindrome, considering only alphanumeric characters and ignoring cases.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.015037299588669178,
    "max_entropy": 0.6466038823127747,
    "min_entropy": -0.0,
    "std_entropy": 0.09745283943844012,
    "mean_confidence": 0.9918919746265855,
    "min_confidence": 0.6513549089431763,
    "std_confidence": 0.05254601002121097,
    "mean_top5_conc": 1.0,
    "mean_top10_conc": 1.0,
    "min_top5_conc": 1.0,
    "sequence_length": 43,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": -0.0,
    "entropy_p75": -0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef is_palindrome(s: str) -> bool:\n    s = ''.join([c.lower() for c in s if c.isalnum()])\n    return s == s[::-1]\n```",
    "original_code": "def is_palindrome(s: str) -> bool:\n    s = ''.join([c.lower() for c in s if c.isalnum()])\n    return s == s[::-1]",
    "entry_point": "is_palindrome",
    "testcase": "[assert is_palindrome(\" \") == True, assert is_palindrome(\"race a car\") == False, assert is_palindrome(\"A man, a plan, a canal: Panama\") == True]"
  },
  {
    "seq_id": 15590275150,
    "instruction": "Create a python function to find the second largest number in a list of integers. Assume that the list always has at least two distinct numbers.",
    "generated_text": "```python\ndef find_second_largest(nums):\n    first, second = float('-inf'), float('-inf')\n    for num in nums:\n        if num > first:\n            first, second = num, first\n        elif num > second and num != first:\n            second = num\n    return second\n```",
    "generated_code": "def find_second_largest(nums):\n    first, second = float('-inf'), float('-inf')\n    for num in nums:\n        if num > first:\n            first, second = num, first\n        elif num > second and num != first:\n            second = num\n    return second",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nCreate a python function to find the second largest number in a list of integers. Assume that the list always has at least two distinct numbers.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.03705081756298358,
    "max_entropy": 0.6926391124725342,
    "min_entropy": -0.0,
    "std_entropy": 0.14731388910852114,
    "mean_confidence": 0.9792864561080933,
    "min_confidence": 0.5159376263618469,
    "std_confidence": 0.08648619572802939,
    "mean_top5_conc": 0.9999999990830055,
    "mean_top10_conc": 0.9999999990830055,
    "min_top5_conc": 0.9999999403953552,
    "sequence_length": 65,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": 0.0,
    "entropy_p75": 0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef find_second_largest(nums):\n    max_num = second_max_num = float('-inf')\n    for num in nums:\n        if num > max_num:\n            second_max_num = max_num\n            max_num = num\n        elif num > second_max_num and num != max_num:\n            second_max_num = num\n    return second_max_num\n```",
    "original_code": "def find_second_largest(nums):\n    max_num = second_max_num = float('-inf')\n    for num in nums:\n        if num > max_num:\n            second_max_num = max_num\n            max_num = num\n        elif num > second_max_num and num != max_num:\n            second_max_num = num\n    return second_max_num",
    "entry_point": "find_second_largest",
    "testcase": "[assert find_second_largest([100, 200, 300]) == 200, assert find_second_largest([-1, -2, -3, -4, -5]) == -2, assert find_second_largest([10, 20, 20, 30, 40]) == 30, assert find_second_largest([5, 1, 2, 3, 4]) == 4, assert find_second_largest([1, 2, 3, 4, 5]) == 4]"
  },
  {
    "seq_id": 74992079799,
    "instruction": "Write a function to find the median of two sorted arrays.",
    "generated_text": "```python\ndef findMedianSortedArrays(nums1, nums2):\n    m, n = len(nums1), len(nums2)\n    if m > n:\n        return findMedianSortedArrays(nums2, nums1)\n    \n    i_min, i_max, half_len = 0, m, (m + n + 1) // 2\n    \n    while i_min <= i_max:\n        i = (i_min + i_max) // 2\n        j = half_len - i\n        \n        if i < m and nums1[i] < nums2[j-1]:\n            i_min = i + 1\n        elif i > 0 and nums1[i-1] > nums2[j]:\n            i_max = i - 1\n        else:\n            if i == 0: max_of_left = nums2[j-1]\n            elif j == 0: max_of_left = nums1[i-1]\n            else: max_of_left =",
    "generated_code": "def findMedianSortedArrays(nums1, nums2):\n    m, n = len(nums1), len(nums2)\n    if m > n:\n        return findMedianSortedArrays(nums2, nums1)\n    \n    i_min, i_max, half_len = 0, m, (m + n + 1) // 2\n    \n    while i_min <= i_max:\n        i = (i_min + i_max) // 2\n        j = half_len - i\n        \n        if i < m and nums1[i] < nums2[j-1]:\n            i_min = i + 1\n        elif i > 0 and nums1[i-1] > nums2[j]:\n            i_max = i - 1\n        else:\n            if i == 0: max_of_left = nums2[j-1]\n            elif j == 0: max_of_left = nums1[i-1]\n            else: max_of_left =",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a function to find the median of two sorted arrays.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.023237501978874208,
    "max_entropy": 1.0687516927719116,
    "min_entropy": -0.0,
    "std_entropy": 0.12899148073990369,
    "mean_confidence": 0.98854635566473,
    "min_confidence": 0.43378424644470215,
    "std_confidence": 0.06641214579766587,
    "mean_top5_conc": 1.0000000002980232,
    "mean_top10_conc": 1.0000000002980232,
    "min_top5_conc": 0.9999999403953552,
    "sequence_length": 200,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": -0.0,
    "entropy_p75": 0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef find_median(nums1, nums2):\n    nums = sorted(nums1 + nums2)\n    if len(nums) % 2 == 0:\n        return (nums[len(nums)//2] + nums[len(nums)//2 - 1]) / 2\n    else:\n        return nums[len(nums)//2]\n```",
    "original_code": "def find_median(nums1, nums2):\n    nums = sorted(nums1 + nums2)\n    if len(nums) % 2 == 0:\n        return (nums[len(nums)//2] + nums[len(nums)//2 - 1]) / 2\n    else:\n        return nums[len(nums)//2]",
    "entry_point": "find_median",
    "testcase": "[assert find_median([1,2], [3,4])==2.5, assert find_median([1,3], [2])==2.0, assert find_median([1,3], [2,7])==2.5]"
  },
  {
    "seq_id": 6257817307,
    "instruction": "Write a function that takes a string and a target character as input, and returns the number of times the target character appears in the string. The function should be case insensitive.",
    "generated_text": "```python\ndef count_character_occurrences(s, target):\n    return s.lower().count(target.lower())\n```",
    "generated_code": "def count_character_occurrences(s, target):\n    return s.lower().count(target.lower())",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a function that takes a string and a target character as input, and returns the number of times the target character appears in the string. The function should be case insensitive.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.06594378274420033,
    "max_entropy": 0.6928980946540833,
    "min_entropy": -0.0,
    "std_entropy": 0.1774351686941958,
    "mean_confidence": 0.9660895078078561,
    "min_confidence": 0.5111590027809143,
    "std_confidence": 0.10557824181171914,
    "mean_top5_conc": 0.9999999974084937,
    "mean_top10_conc": 0.9999999974084937,
    "min_top5_conc": 0.9999999403953552,
    "sequence_length": 23,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": -0.0,
    "entropy_p75": -0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef count_char(string, target_char):\n    string = string.lower()\n    target_char = target_char.lower()\n    return string.count(target_char)\n```",
    "original_code": "def count_char(string, target_char):\n    string = string.lower()\n    target_char = target_char.lower()\n    return string.count(target_char)",
    "entry_point": "count_char",
    "testcase": "[assert count_char(\"HELLO WORLD\", \"w\") == 1, assert count_char(\"MISSISSIPPI\", \"i\") == 4, assert count_char(\"Mississippi\", \"s\") == 4, assert count_char(\"Hello World\", \"o\") == 2]"
  },
  {
    "seq_id": 15526957597,
    "instruction": "Write a function that checks if a given string is an anagram of a palindrome.",
    "generated_text": "```python\ndef is_anagram_of_palindrome(s):\n    s = s.replace(\" \", \"\").lower()\n    char_count = {}\n    \n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n    \n    return odd_count <= 1\n```",
    "generated_code": "def is_anagram_of_palindrome(s):\n    s = s.replace(\" \", \"\").lower()\n    char_count = {}\n    \n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n    \n    return odd_count <= 1",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a function that checks if a given string is an anagram of a palindrome.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.02590557187795639,
    "max_entropy": 0.6931458711624146,
    "min_entropy": -0.0,
    "std_entropy": 0.11868095302044303,
    "mean_confidence": 0.9864370404527738,
    "min_confidence": 0.500798225402832,
    "std_confidence": 0.06878182626996358,
    "mean_top5_conc": 1.0,
    "mean_top10_conc": 1.0,
    "min_top5_conc": 1.0,
    "sequence_length": 104,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": -0.0,
    "entropy_p75": 0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef is_anagram_of_palindrome(s: str) -> bool:\n    char_counts = Counter(s)\n    odd_counts = sum(1 for count in char_counts.values() if count % 2 != 0)\n    return odd_counts <= 1\n```",
    "original_code": "from collections import Counter\n\ndef is_anagram_of_palindrome(s: str) -> bool:\n    char_counts = Counter(s)\n    odd_counts = sum(1 for count in char_counts.values() if count % 2 != 0)\n    return odd_counts <= 1",
    "entry_point": "is_anagram_of_palindrome",
    "testcase": "[assert is_anagram_of_palindrome(\"carerac\") == True, assert is_anagram_of_palindrome(\"aabbc\") == True, assert is_anagram_of_palindrome(\"aabbcc\") == True, assert is_anagram_of_palindrome(\"abc\") == False, assert is_anagram_of_palindrome(\"aabb\") == True]"
  },
  {
    "seq_id": 20004586671,
    "instruction": "Write a python function to find the maximum product of three numbers in a list. The function should return the maximum product.",
    "generated_text": "```python\ndef maximum_product(nums):\n    nums.sort()\n    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])\n```",
    "generated_code": "def maximum_product(nums):\n    nums.sort()\n    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a python function to find the maximum product of three numbers in a list. The function should return the maximum product.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.04423383739259508,
    "max_entropy": 0.5493885278701782,
    "min_entropy": -0.0,
    "std_entropy": 0.14264045476107545,
    "mean_confidence": 0.982092461321089,
    "min_confidence": 0.7614622712135315,
    "std_confidence": 0.05845536565391187,
    "mean_top5_conc": 1.0,
    "mean_top10_conc": 1.0,
    "min_top5_conc": 1.0,
    "sequence_length": 45,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": 0.0,
    "entropy_p75": 0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef max_product(nums):\n    nums.sort()\n    return max(nums[0]*nums[1]*nums[-1], nums[-1]*nums[-2]*nums[-3])\n```",
    "original_code": "def max_product(nums):\n    nums.sort()\n    return max(nums[0]*nums[1]*nums[-1], nums[-1]*nums[-2]*nums[-3])",
    "entry_point": "max_product",
    "testcase": "[assert max_product([0, -1, 3, 100, -70, -5]) == 35000, assert max_product([-1, -2, -3, 4]) == 24, assert max_product([1, 2, 3]) == 6]"
  },
  {
    "seq_id": 44911643638,
    "instruction": "Write a python function to find the minimum number of swaps required to sort a list.",
    "generated_text": "```python\ndef min_swaps_to_sort(arr):\n    n = len(arr)\n    arrpos = [(val, idx) for idx, val in enumerate(arr)]\n    arrpos.sort(key=lambda it: it[0])\n    visited = [False] * n\n    swaps = 0\n    for i in range(n):\n        if visited[i] or arrpos[i][1] == i:\n            continue\n        cycle_size = 0\n        j = i\n        while not visited[j]:\n            visited[j] = True\n            j = arrpos[j][1]\n            cycle_size += 1\n        if cycle_size > 0:\n            swaps += (cycle_size - 1)\n    return swaps\n```",
    "generated_code": "def min_swaps_to_sort(arr):\n    n = len(arr)\n    arrpos = [(val, idx) for idx, val in enumerate(arr)]\n    arrpos.sort(key=lambda it: it[0])\n    visited = [False] * n\n    swaps = 0\n    for i in range(n):\n        if visited[i] or arrpos[i][1] == i:\n            continue\n        cycle_size = 0\n        j = i\n        while not visited[j]:\n            visited[j] = True\n            j = arrpos[j][1]\n            cycle_size += 1\n        if cycle_size > 0:\n            swaps += (cycle_size - 1)\n    return swaps",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a python function to find the minimum number of swaps required to sort a list.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.022315325721210203,
    "max_entropy": 0.9743970632553101,
    "min_entropy": -0.0,
    "std_entropy": 0.1241386658277322,
    "mean_confidence": 0.9889377256892374,
    "min_confidence": 0.544525146484375,
    "std_confidence": 0.06231948678303415,
    "mean_top5_conc": 1.0,
    "mean_top10_conc": 1.0,
    "min_top5_conc": 1.0,
    "sequence_length": 151,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": -0.0,
    "entropy_p75": -0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef min_swaps_to_sort(arr):\n    n = len(arr)\n    arr_pos = [*enumerate(arr)]\n    arr_pos.sort(key=lambda it: it[1])\n    vis = {k: False for k in range(n)}\n\n    ans = 0\n    for i in range(n):\n        if vis[i] or arr_pos[i][0] == i:\n            continue\n\n        cycle_size = 0\n        j = i\n        while not vis[j]:\n            vis[j] = True\n            j = arr_pos[j][0]\n            cycle_size += 1\n        if cycle_size > 0:\n            ans += (cycle_size - 1)\n    return ans\n```",
    "original_code": "def min_swaps_to_sort(arr):\n    n = len(arr)\n    arr_pos = [*enumerate(arr)]\n    arr_pos.sort(key=lambda it: it[1])\n    vis = {k: False for k in range(n)}\n\n    ans = 0\n    for i in range(n):\n        if vis[i] or arr_pos[i][0] == i:\n            continue\n\n        cycle_size = 0\n        j = i\n        while not vis[j]:\n            vis[j] = True\n            j = arr_pos[j][0]\n            cycle_size += 1\n        if cycle_size > 0:\n            ans += (cycle_size - 1)\n    return ans",
    "entry_point": "min_swaps_to_sort",
    "testcase": "[assert min_swaps_to_sort([1, 3, 5, 2, 4, 6, 7]) == 3, assert min_swaps_to_sort([1, 5, 4, 3, 2]) == 2, assert min_swaps_to_sort([4, 3, 2, 1]) == 2]"
  },
  {
    "seq_id": 2175400675,
    "instruction": "Write a function to find the maximum difference between two elements in a list, where the larger element comes after the smaller one.",
    "generated_text": "```python\ndef max_difference(nums):\n    if not nums or len(nums) < 2:\n        return 0\n    \n    min_val = nums[0]\n    max_diff = 0\n    \n    for num in nums[1:]:\n        max_diff = max(max_diff, num - min_val)\n        min_val = min(min_val, num)\n    \n    return max_diff\n```",
    "generated_code": "def max_difference(nums):\n    if not nums or len(nums) < 2:\n        return 0\n    \n    min_val = nums[0]\n    max_diff = 0\n    \n    for num in nums[1:]:\n        max_diff = max(max_diff, num - min_val)\n        min_val = min(min_val, num)\n    \n    return max_diff",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a function to find the maximum difference between two elements in a list, where the larger element comes after the smaller one.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.02907834286931195,
    "max_entropy": 0.9362385869026184,
    "min_entropy": -0.0,
    "std_entropy": 0.13722960010557178,
    "mean_confidence": 0.98732614441763,
    "min_confidence": 0.5872457027435303,
    "std_confidence": 0.06308430710208197,
    "mean_top5_conc": 1.0,
    "mean_top10_conc": 1.0,
    "min_top5_conc": 1.0,
    "sequence_length": 79,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": -0.0,
    "entropy_p75": -0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef max_difference(lst):\n    if len(lst) < 2:\n        return 0\n    min_val = lst[0]\n    max_diff = 0\n    for i in range(1, len(lst)):\n        if lst[i] - min_val > max_diff:\n            max_diff = lst[i] - min_val\n        if lst[i] < min_val:\n            min_val = lst[i]\n    return max_diff\n```",
    "original_code": "def max_difference(lst):\n    if len(lst) < 2:\n        return 0\n    min_val = lst[0]\n    max_diff = 0\n    for i in range(1, len(lst)):\n        if lst[i] - min_val > max_diff:\n            max_diff = lst[i] - min_val\n        if lst[i] < min_val:\n            min_val = lst[i]\n    return max_diff",
    "entry_point": "max_difference",
    "testcase": "[assert max_difference([1, 2, 3, 4, 5]) == 4, assert max_difference([7, 9, 5, 6, 3, 2]) == 2, assert max_difference([2, 3, 10, 2, 4, 8, 1]) == 8]"
  },
  {
    "seq_id": 40713914324,
    "instruction": "Write a python function to find the longest substring without repeating characters in a given string.",
    "generated_text": "```python\ndef longest_unique_substring(s):\n    start = max_length = 0\n    char_index_map = {}\n    \n    for i, char in enumerate(s):\n        if char in char_index_map and char_index_map[char] >= start:\n            start = char_index_map[char] + 1\n        char_index_map[char] = i\n        max_length = max(max_length, i - start + 1)\n    \n    return s[start:start + max_length]\n```",
    "generated_code": "def longest_unique_substring(s):\n    start = max_length = 0\n    char_index_map = {}\n    \n    for i, char in enumerate(s):\n        if char in char_index_map and char_index_map[char] >= start:\n            start = char_index_map[char] + 1\n        char_index_map[char] = i\n        max_length = max(max_length, i - start + 1)\n    \n    return s[start:start + max_length]",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a python function to find the longest substring without repeating characters in a given string.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.053243460077227966,
    "max_entropy": 0.9614355564117432,
    "min_entropy": -0.0,
    "std_entropy": 0.17695455978616817,
    "mean_confidence": 0.973476002914737,
    "min_confidence": 0.5334320664405823,
    "std_confidence": 0.09392445674834712,
    "mean_top5_conc": 0.9999999993979328,
    "mean_top10_conc": 0.9999999993979328,
    "min_top5_conc": 0.9999999403953552,
    "sequence_length": 99,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": -0.0,
    "entropy_p75": -0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef longest_substring_without_repeating_characters(s):\n    char_map = {}\n    left = 0\n    result = \"\"\n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        if right - left + 1 > len(result):\n            result = s[left:right+1]\n    return result\n```",
    "original_code": "def longest_substring_without_repeating_characters(s):\n    char_map = {}\n    left = 0\n    result = \"\"\n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        if right - left + 1 > len(result):\n            result = s[left:right+1]\n    return result",
    "entry_point": "longest_substring_without_repeating_characters",
    "testcase": "[assert longest_substring_without_repeating_characters(\"pwwkew\") == \"wke\", assert longest_substring_without_repeating_characters(\"bbbbb\") == \"b\", assert longest_substring_without_repeating_characters(\"abcabcbb\") == \"abc\"]"
  },
  {
    "seq_id": 18779514445,
    "instruction": "Write a function that takes a list of strings and returns a list of all the anagrams found in the list. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "generated_text": "```python\ndef find_anagrams(word_list):\n    from collections import defaultdict\n    \n    anagrams = defaultdict(list)\n    \n    for word in word_list:\n        sorted_word = ''.join(sorted(word))\n        anagrams[sorted_word].append(word)\n    \n    return [anagram_group for anagram_group in anagrams.values() if len(anagram_group) > 1]\n```",
    "generated_code": "def find_anagrams(word_list):\n    from collections import defaultdict\n    \n    anagrams = defaultdict(list)\n    \n    for word in word_list:\n        sorted_word = ''.join(sorted(word))\n        anagrams[sorted_word].append(word)\n    \n    return [anagram_group for anagram_group in anagrams.values() if len(anagram_group) > 1]",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a function that takes a list of strings and returns a list of all the anagrams found in the list. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.02572674246934744,
    "max_entropy": 0.6296607851982117,
    "min_entropy": -0.0,
    "std_entropy": 0.11425997979313442,
    "mean_confidence": 0.9886763982283764,
    "min_confidence": 0.6762542128562927,
    "std_confidence": 0.053021951778716464,
    "mean_top5_conc": 0.9999999992358379,
    "mean_top10_conc": 0.9999999992358379,
    "min_top5_conc": 0.9999999403953552,
    "sequence_length": 78,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": 0.0,
    "entropy_p75": -0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef anagrams(strs):\n    anag = {}\n    result = []\n    for str in strs:\n        s = ''.join(sorted(str))\n        if (s in anag):\n            anag[s].append(str)\n        else:\n            anag[s] = [str]\n    for str in anag:\n        if(len(anag[str])>1):\n            result.extend(anag[str])\n    return result\n```",
    "original_code": "def anagrams(strs):\n    anag = {}\n    result = []\n    for str in strs:\n        s = ''.join(sorted(str))\n        if (s in anag):\n            anag[s].append(str)\n        else:\n            anag[s] = [str]\n    for str in anag:\n        if(len(anag[str])>1):\n            result.extend(anag[str])\n    return result",
    "entry_point": "anagrams",
    "testcase": "[assert anagrams([\"a\"]) == [], assert anagrams([\"\"]) == [], assert anagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [\"eat\", \"tea\", \"ate\", \"tan\", \"nat\"]]"
  },
  {
    "seq_id": 70034082307,
    "instruction": "Write a python function to find the maximum number of consecutive 1's in the array if you can change at most k 0's to 1's.",
    "generated_text": "```python\ndef max_consecutive_ones(nums, k):\n    left = 0\n    max_length = 0\n    zero_count = 0\n    \n    for right in range(len(nums)):\n        if nums[right] == 0:\n            zero_count += 1\n        \n        while zero_count > k:\n            if nums[left] == 0:\n                zero_count -= 1\n            left += 1\n        \n        max_length = max(max_length, right - left + 1)\n    \n    return max_length\n```",
    "generated_code": "def max_consecutive_ones(nums, k):\n    left = 0\n    max_length = 0\n    zero_count = 0\n    \n    for right in range(len(nums)):\n        if nums[right] == 0:\n            zero_count += 1\n        \n        while zero_count > k:\n            if nums[left] == 0:\n                zero_count -= 1\n            left += 1\n        \n        max_length = max(max_length, right - left + 1)\n    \n    return max_length",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a python function to find the maximum number of consecutive 1's in the array if you can change at most k 0's to 1's.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.010010439048119641,
    "max_entropy": 0.40213802456855774,
    "min_entropy": -0.0,
    "std_entropy": 0.05968567491173671,
    "mean_confidence": 0.9967283743237136,
    "min_confidence": 0.8615509271621704,
    "std_confidence": 0.019590115873440905,
    "mean_top5_conc": 0.9999999994531684,
    "mean_top10_conc": 0.9999999994531684,
    "min_top5_conc": 0.9999999403953552,
    "sequence_length": 109,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": 0.0,
    "entropy_p75": 0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef max_ones(arr, k):\n    left = 0\n    max_len = 0\n    zero_count = 0\n\n    for right in range(len(arr)):\n        if arr[right] == 0:\n            zero_count += 1\n\n        while zero_count > k:\n            if arr[left] == 0:\n                zero_count -= 1\n            left += 1\n\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n```",
    "original_code": "def max_ones(arr, k):\n    left = 0\n    max_len = 0\n    zero_count = 0\n\n    for right in range(len(arr)):\n        if arr[right] == 0:\n            zero_count += 1\n\n        while zero_count > k:\n            if arr[left] == 0:\n                zero_count -= 1\n            left += 1\n\n        max_len = max(max_len, right - left + 1)\n\n    return max_len",
    "entry_point": "max_ones",
    "testcase": "[assert max_ones([1,1,0,1], 1) == 4, assert max_ones([0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], 3) == 10, assert max_ones([1,1,1,0,0,0,1,1,1,1,0], 2) == 6]"
  },
  {
    "seq_id": 74061132546,
    "instruction": "Write a python function to find the most frequent character in a string and return its count.",
    "generated_text": "```python\ndef most_frequent_char_count(s):\n    from collections import Counter\n    char_count = Counter(s)\n    if not char_count:\n        return 0\n    max_count = max(char_count.values())\n    return max_count\n```",
    "generated_code": "def most_frequent_char_count(s):\n    from collections import Counter\n    char_count = Counter(s)\n    if not char_count:\n        return 0\n    max_count = max(char_count.values())\n    return max_count",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nWrite a python function to find the most frequent character in a string and return its count.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.04481294692731371,
    "max_entropy": 1.2020626068115234,
    "min_entropy": -0.0,
    "std_entropy": 0.1855662077413035,
    "mean_confidence": 0.9831941665387621,
    "min_confidence": 0.5073568820953369,
    "std_confidence": 0.07382128103386482,
    "mean_top5_conc": 1.0,
    "mean_top10_conc": 1.0,
    "min_top5_conc": 1.0,
    "sequence_length": 51,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": -0.0,
    "entropy_p75": -0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\ndef frequent_char(s):\n    max_count = 0\n    max_char = ''\n    char_count = {}\n    for c in s:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n        if char_count[c] > max_count:\n            max_count = char_count[c]\n            max_char = c\n    return max_count\n```",
    "original_code": "def frequent_char(s):\n    max_count = 0\n    max_char = ''\n    char_count = {}\n    for c in s:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n        if char_count[c] > max_count:\n            max_count = char_count[c]\n            max_char = c\n    return max_count",
    "entry_point": "frequent_char",
    "testcase": "[assert frequent_char(\"aabbccddeeffgghh\") == 2, assert frequent_char(\"python programming\") == 2, assert frequent_char(\"hello world\") == 3]"
  },
  {
    "seq_id": 6536870388,
    "instruction": "Create a function in Python that takes a list of positive integers as input and returns the maximum product that can be achieved by multiplying any three numbers from the list. Note that the list must contain at least three integers.",
    "generated_text": "```python\ndef max_product_of_three(nums):\n    nums.sort()\n    n = len(nums)\n    return max(nums[0] * nums[1] * nums[n-1], nums[n-3] * nums[n-2] * nums[n-1])\n```",
    "generated_code": "def max_product_of_three(nums):\n    nums.sort()\n    n = len(nums)\n    return max(nums[0] * nums[1] * nums[n-1], nums[n-3] * nums[n-2] * nums[n-1])",
    "prompt": "<|im_start|>system\nYou are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>\n<|im_start|>user\nWrite a Python function to solve this problem. Provide only the function code without comments or explanations:\n\nCreate a function in Python that takes a list of positive integers as input and returns the maximum product that can be achieved by multiplying any three numbers from the list. Note that the list must contain at least three integers.<|im_end|>\n<|im_start|>assistant\n",
    "mean_entropy": 0.026612351860916407,
    "max_entropy": 0.6256712675094604,
    "min_entropy": -0.0,
    "std_entropy": 0.1147152459326698,
    "mean_confidence": 0.988645378957715,
    "min_confidence": 0.6815819144248962,
    "std_confidence": 0.05109216976368573,
    "mean_top5_conc": 1.0,
    "mean_top10_conc": 1.0,
    "min_top5_conc": 1.0,
    "sequence_length": 57,
    "entropy_trend": 0.0,
    "confidence_trend": 0.0,
    "entropy_p25": 0.0,
    "entropy_p75": 0.0,
    "confidence_p25": 1.0,
    "confidence_p75": 1.0,
    "original_output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef max_product(nums: List[int]) -> int:\n    # Sort the list in ascending order\n    nums.sort()\n    # The maximum product can be either:\n    # (1) The product of the three largest numbers\n    # or (2) The product of the two smallest numbers (which could be negative) and the largest number\n    return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])\n```",
    "original_code": "from typing import List\n\ndef max_product(nums: List[int]) -> int:\n    # Sort the list in ascending order\n    nums.sort()\n    # The maximum product can be either:\n    # (1) The product of the three largest numbers\n    # or (2) The product of the two smallest numbers (which could be negative) and the largest number\n    return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])",
    "entry_point": "max_product",
    "testcase": "[assert max_product([5, 5, 5, 5]) == 125, assert max_product([7, 6, 5, 4, 3, 2, 1]) == 210, assert max_product([1, 2, 3, 4]) == 24]"
  }
]