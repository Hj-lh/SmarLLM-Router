seq_id,instruction,generated_text,generated_code,prompt,mean_entropy,max_entropy,min_entropy,std_entropy,mean_confidence,min_confidence,std_confidence,mean_top5_conc,mean_top10_conc,min_top5_conc,sequence_length,entropy_trend,confidence_trend,entropy_p25,entropy_p75,confidence_p25,confidence_p75,original_output,original_code,entry_point,testcase
660113403,"Write a function to check if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward, ignoring spaces, punctuation, and capitalization.","```python
def is_palindrome(s):
    s = ''.join(c.lower() for c in s if c.isalnum())
    return s == s[::-1]
```","def is_palindrome(s):
    s = ''.join(c.lower() for c in s if c.isalnum())
    return s == s[::-1]","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a function to check if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward, ignoring spaces, punctuation, and capitalization.<|im_end|>
<|im_start|>assistant
",0.0,-0.0,-0.0,0.0,1.0,1.0,0.0,1.0,1.0,1.0,36,0.0,0.0,-0.0,0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def is_palindrome(s):
    s = ''.join(c for c in s if c.isalnum()).lower()
    return s == s[::-1]
```","def is_palindrome(s):
    s = ''.join(c for c in s if c.isalnum()).lower()
    return s == s[::-1]",is_palindrome,"[assert is_palindrome(""No lemon, no melon"") == True, assert is_palindrome(""A man a plan a canal Panama"") == True, assert is_palindrome(""hello"") == False, assert is_palindrome(""racecar"") == True]"
14192481277,Write a function to find the missing number in a given list of numbers ranging from 0 to n.,"```python
def find_missing_number(nums):
    n = len(nums)
    expected_sum = n * (n + 1) // 2
    actual_sum = sum(nums)
    return expected_sum - actual_sum
```","def find_missing_number(nums):
    n = len(nums)
    expected_sum = n * (n + 1) // 2
    actual_sum = sum(nums)
    return expected_sum - actual_sum","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a function to find the missing number in a given list of numbers ranging from 0 to n.<|im_end|>
<|im_start|>assistant
",0.011831300954023996,0.5679024457931519,-0.0,0.08111131281418389,0.9946847669780254,0.744868814945221,0.03643940171930346,1.0,1.0,1.0,48,0.0,0.0,-0.0,0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def missing_number(nums):
    n = len(nums)
    total = n * (n + 1) // 2
    sum_nums = sum(nums)
    return total - sum_nums
```","def missing_number(nums):
    n = len(nums)
    total = n * (n + 1) // 2
    sum_nums = sum(nums)
    return total - sum_nums",missing_number,"[assert missing_number([9,6,4,2,3,5,7,0,1])==8, assert missing_number([0,1])==2, assert missing_number([3,0,1])==2]"
70726638201,Write a python function `max_subarray_sum` that finds the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has at least one positive number.,"```python
def max_subarray_sum(nums):
    max_current = max_global = nums[0]
    for i in range(1, len(nums)):
        max_current = max(nums[i], max_current + nums[i])
        if max_current > max_global:
            max_global = max_current
    return max_global
```","def max_subarray_sum(nums):
    max_current = max_global = nums[0]
    for i in range(1, len(nums)):
        max_current = max(nums[i], max_current + nums[i])
        if max_current > max_global:
            max_global = max_current
    return max_global","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a python function `max_subarray_sum` that finds the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has at least one positive number.<|im_end|>
<|im_start|>assistant
",0.013490377980120042,0.510796070098877,-0.0,0.07801016983920726,0.9948749577297884,0.7923726439476013,0.02999238596547565,1.0,1.0,1.0,68,0.0,0.0,-0.0,0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def max_subarray_sum(nums):
    if not nums:
        return 0

    current_sum = max_sum = nums[0]
    for num in nums[1:]:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    return max_sum
```","def max_subarray_sum(nums):
    if not nums:
        return 0

    current_sum = max_sum = nums[0]
    for num in nums[1:]:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    return max_sum",max_subarray_sum,"[assert max_subarray_sum([5,4,-1,7,8]) == 23, assert max_subarray_sum([1]) == 1, assert max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]) == 6]"
893855581,"Given an array nums of n integers and an integer k, find the kth largest element in the array. Note that it is the kth largest element in the sorted order, not the kth distinct element.","```python
def findKthLargest(nums, k):
    nums.sort()
    return nums[-k]
```","def findKthLargest(nums, k):
    nums.sort()
    return nums[-k]","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Given an array nums of n integers and an integer k, find the kth largest element in the array. Note that it is the kth largest element in the sorted order, not the kth distinct element.<|im_end|>
<|im_start|>assistant
",0.04179859161376953,0.667354166507721,-0.0,0.1475497624894126,0.9795055794715881,0.613071858882904,0.07872639571004726,1.0,1.0,1.0,25,0.0,0.0,0.0,0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def kth_largest(nums, k):
    nums.sort()
    return nums[-k]
```","def kth_largest(nums, k):
    nums.sort()
    return nums[-k]",kth_largest,"[assert kth_largest([1,2], 1) == 2, assert kth_largest([3,2,3,1,2,4,5,5,6], 4) == 4, assert kth_largest([3,2,1,5,6,4], 2) == 5]"
20383247274,Write a function to generate the nth row of Pascal's triangle.,"```python
def getRow(n):
    row = [1]
    for i in range(1, n + 1):
        row = [x + y for x, y in zip([0] + row, row + [0])]
    return row
```","def getRow(n):
    row = [1]
    for i in range(1, n + 1):
        row = [x + y for x, y in zip([0] + row, row + [0])]
    return row","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a function to generate the nth row of Pascal's triangle.<|im_end|>
<|im_start|>assistant
",0.03981887143954896,0.9608573317527771,-0.0,0.17222056016982756,0.9797789632228383,0.582931637763977,0.08635486507541919,1.0,1.0,1.0,57,0.0,0.0,0.0,0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def pascal_row(n):
    row = [1]
    for i in range(1, n+1):
        row.append(row[i-1] * (n-i+1) // i)
    return row
```","def pascal_row(n):
    row = [1]
    for i in range(1, n+1):
        row.append(row[i-1] * (n-i+1) // i)
    return row",pascal_row,"[assert pascal_row(5) == [1, 5, 10, 10, 5, 1], assert pascal_row(4) == [1, 4, 6, 4, 1], assert pascal_row(3) == [1, 3, 3, 1]]"
19434228727,"Write a function that checks if a given tree is a binary search tree.

A binary search tree has the property that all nodes in the left subtree of a node have values less than the node's value and all nodes in the right subtree have values greater than the node's value.","```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def is_bst(node, lower=float('-inf'), upper=float('inf')):
    if not node:
        return True
    if node.val <= lower or node.val >= upper:
        return False
    return (is_bst(node.left, lower, node.val) and
            is_bst(node.right, node.val, upper))
```","class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def is_bst(node, lower=float('-inf'), upper=float('inf')):
    if not node:
        return True
    if node.val <= lower or node.val >= upper:
        return False
    return (is_bst(node.left, lower, node.val) and
            is_bst(node.right, node.val, upper))","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a function that checks if a given tree is a binary search tree.

A binary search tree has the property that all nodes in the left subtree of a node have values less than the node's value and all nodes in the right subtree have values greater than the node's value.<|im_end|>
<|im_start|>assistant
",0.05303973012736866,1.212295651435852,-0.0,0.1953073682432839,0.9743585011788777,0.500828742980957,0.09734857894205899,1.0,1.0,1.0,112,0.0,0.0,-0.0,0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def is_binary_search_tree(root, min_val=float('-inf'), max_val=float('inf')):
    if root is None:
        return True

    if not (root.val > min_val and root.val < max_val):
        return False

    return (is_binary_search_tree(root.left, min_val, root.val) and
            is_binary_search_tree(root.right, root.val, max_val))
```","def is_binary_search_tree(root, min_val=float('-inf'), max_val=float('inf')):
    if root is None:
        return True

    if not (root.val > min_val and root.val < max_val):
        return False

    return (is_binary_search_tree(root.left, min_val, root.val) and
            is_binary_search_tree(root.right, root.val, max_val))",is_binary_search_tree,"[    assert is_binary_search_tree(root3) == True,     root3.right.right = TreeNode(17),     root3.right.left = TreeNode(12),     root3.left.right = TreeNode(7),     root3.left.left = TreeNode(3),     root3.right = TreeNode(15),     root3.left = TreeNode(5),     root3 = TreeNode(10),     # Test case 3: A more complex binary search tree, ,     assert is_binary_search_tree(root2) == False,     root2.left.right = TreeNode(4),     root2.left.left = TreeNode(1),     root2.right = TreeNode(2),     root2.left = TreeNode(3),     root2 = TreeNode(5),     # Test case 2: A binary tree that is not a binary search tree, ,     assert is_binary_search_tree(root1) == True,     root1.left.right = TreeNode(4),     root1.left.left = TreeNode(2),     root1.right = TreeNode(7),     root1.left = TreeNode(3),     root1 = TreeNode(5),     # Test case 1: A simple binary search tree, ]"
28755799726,"Write a python function to find the missing number in a given list of integers that contains n distinct numbers taken from 0, 1, 2, ..., n. The function should have a time complexity of O(n) and space complexity of O(1).","```python
def find_missing_number(nums):
    n = len(nums)
    total_sum = n * (n + 1) // 2
    array_sum = sum(nums)
    return total_sum - array_sum
```","def find_missing_number(nums):
    n = len(nums)
    total_sum = n * (n + 1) // 2
    array_sum = sum(nums)
    return total_sum - array_sum","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a python function to find the missing number in a given list of integers that contains n distinct numbers taken from 0, 1, 2, ..., n. The function should have a time complexity of O(n) and space complexity of O(1).<|im_end|>
<|im_start|>assistant
",0.010932664076487223,0.5247678756713867,-0.0,0.07495056877060886,0.9954517570634683,0.7816843390464783,0.03118118261157512,1.0,1.0,1.0,48,0.0,0.0,-0.0,0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def missing_number(nums):
    n = len(nums)
    total = n * (n + 1) // 2
    sum_nums = sum(nums)
    return total - sum_nums
```","def missing_number(nums):
    n = len(nums)
    total = n * (n + 1) // 2
    sum_nums = sum(nums)
    return total - sum_nums",missing_number,"[assert missing_number([9,6,4,2,3,5,7,0,1]) == 8, assert missing_number([0, 1]) == 2, assert missing_number([3, 0, 1]) == 2]"
70726596281,"Write a python function to check if a given string is a palindrome or not. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward.","```python
def is_palindrome(s):
    return s == s[::-1]
```","def is_palindrome(s):
    return s == s[::-1]","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a python function to check if a given string is a palindrome or not. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward.<|im_end|>
<|im_start|>assistant
",0.03149879919855218,0.5984771847724915,-0.0,0.13363808707517785,0.9849504734340467,0.7140589952468872,0.06384973373059608,1.0,1.0,1.0,19,0.0,0.0,-0.0,-0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def is_palindrome(s):
    return s == s[::-1]
```","def is_palindrome(s):
    return s == s[::-1]",is_palindrome,"[assert is_palindrome(""12345"") == False, assert is_palindrome(""123321"") == True, assert is_palindrome(""12321"") == True, assert is_palindrome(""level"") == True, assert is_palindrome(""python"") == False, assert is_palindrome(""racecar"") == True]"
32279616255,Write a function to check if a given list of integers is sorted in ascending order and all elements are unique.,"```python
def is_sorted_and_unique(lst):
    return lst == sorted(lst) and len(lst) == len(set(lst))
```","def is_sorted_and_unique(lst):
    return lst == sorted(lst) and len(lst) == len(set(lst))","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a function to check if a given list of integers is sorted in ascending order and all elements are unique.<|im_end|>
<|im_start|>assistant
",0.019306781036513194,0.5405898690223694,-0.0,0.1003209770575445,0.9917467896427427,0.7689101099967957,0.042884938992969975,1.0,1.0,1.0,28,0.0,0.0,-0.0,0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def check_sorted_unique(test_list):
    return test_list == sorted(set(test_list))
```","def check_sorted_unique(test_list):
    return test_list == sorted(set(test_list))",check_sorted_unique,"[assert check_sorted_unique([1, 3, 5, 7, 9]) == True, assert check_sorted_unique([5, 4, 3, 2, 1]) == False, assert check_sorted_unique([1, 2, 2, 4, 5]) == False, assert check_sorted_unique([1, 2, 3, 4, 5]) == True]"
12120976763,Write a python function to find the length of the longest substring without repeating characters in a given string.,"```python
def length_of_longest_substring(s: str) -> int:
    char_index_map = {}
    start = 0
    max_length = 0
    
    for end in range(len(s)):
        if s[end] in char_index_map and char_index_map[s[end]] >= start:
            start = char_index_map[s[end]] + 1
        char_index_map[s[end]] = end
        max_length = max(max_length, end - start + 1)
    
    return max_length
```","def length_of_longest_substring(s: str) -> int:
    char_index_map = {}
    start = 0
    max_length = 0
    
    for end in range(len(s)):
        if s[end] in char_index_map and char_index_map[s[end]] >= start:
            start = char_index_map[s[end]] + 1
        char_index_map[s[end]] = end
        max_length = max(max_length, end - start + 1)
    
    return max_length","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a python function to find the length of the longest substring without repeating characters in a given string.<|im_end|>
<|im_start|>assistant
",0.012340483315494082,0.5652978420257568,-0.0,0.07471147293163051,0.9952536755745564,0.7472854256629944,0.029803585409854498,0.9999999994531684,0.9999999994531684,0.9999999403953552,109,0.0,0.0,0.0,0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def length_of_longest_substring(s):
    if not s:
        return 0
    char_map = {}
    left = 0
    max_length = 0
    for right in range(len(s)):
        if s[right] in char_map:
            left = max(left, char_map[s[right]] + 1)
        char_map[s[right]] = right
        max_length = max(max_length, right - left + 1)
    return max_length
```","def length_of_longest_substring(s):
    if not s:
        return 0
    char_map = {}
    left = 0
    max_length = 0
    for right in range(len(s)):
        if s[right] in char_map:
            left = max(left, char_map[s[right]] + 1)
        char_map[s[right]] = right
        max_length = max(max_length, right - left + 1)
    return max_length",length_of_longest_substring,"[assert length_of_longest_substring("" "") == 1, assert length_of_longest_substring("""") == 0, assert length_of_longest_substring(""pwwkew"") == 3, assert length_of_longest_substring(""bbbbb"") == 1, assert length_of_longest_substring(""abcabcbb"") == 3]"
18874307847,Create a function that takes a string as an input and returns a list of unique characters in the string in the order they appear.,"```python
def unique_characters(s):
    seen = set()
    result = []
    for char in s:
        if char not in seen:
            seen.add(char)
            result.append(char)
    return result
```","def unique_characters(s):
    seen = set()
    result = []
    for char in s:
        if char not in seen:
            seen.add(char)
            result.append(char)
    return result","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Create a function that takes a string as an input and returns a list of unique characters in the string in the order they appear.<|im_end|>
<|im_start|>assistant
",0.0,-0.0,-0.0,0.0,1.0,1.0,0.0,1.0,1.0,1.0,46,0.0,0.0,0.0,-0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def unique_char_in_order(input_str):
    unique_chars = []
    for char in input_str:
        if char not in unique_chars:
            unique_chars.append(char)
    return unique_chars
```","def unique_char_in_order(input_str):
    unique_chars = []
    for char in input_str:
        if char not in unique_chars:
            unique_chars.append(char)
    return unique_chars",unique_char_in_order,"[assert unique_char_in_order(""banana"") == ['b', 'a', 'n'], assert unique_char_in_order(""apple"") == ['a', 'p', 'l', 'e'], assert unique_char_in_order(""google"") == ['g', 'o', 'l', 'e']]"
44289869161,Write a function to find the longest substring without repeating characters in a given string.,"```python
def longest_unique_substring(s: str) -> int:
    char_index_map = {}
    start = max_length = 0
    
    for end, char in enumerate(s):
        if char in char_index_map and char_index_map[char] >= start:
            start = char_index_map[char] + 1
        char_index_map[char] = end
        max_length = max(max_length, end - start + 1)
    
    return max_length
```","def longest_unique_substring(s: str) -> int:
    char_index_map = {}
    start = max_length = 0
    
    for end, char in enumerate(s):
        if char in char_index_map and char_index_map[char] >= start:
            start = char_index_map[char] + 1
        char_index_map[char] = end
        max_length = max(max_length, end - start + 1)
    
    return max_length","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a function to find the longest substring without repeating characters in a given string.<|im_end|>
<|im_start|>assistant
",0.03756774977000073,0.6858594417572021,-0.0,0.13951768703617798,0.9821559865065296,0.5602911710739136,0.0713320944696488,0.9999999987958658,0.9999999987958658,0.9999999403953552,99,0.0,0.0,-0.0,-0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def longest_substring_without_repeating_characters(s):
    char_set = set()
    left = 0
    max_length = 0
    max_substring = """"
    for right in range(len(s)):
        while s[right] in char_set:
            char_set.remove(s[left])
            left += 1
        char_set.add(s[right])
        if (right - left + 1) > max_length:
            max_length = right - left + 1
            max_substring = s[left:right+1]
    return max_substring
```","def longest_substring_without_repeating_characters(s):
    char_set = set()
    left = 0
    max_length = 0
    max_substring = """"
    for right in range(len(s)):
        while s[right] in char_set:
            char_set.remove(s[left])
            left += 1
        char_set.add(s[right])
        if (right - left + 1) > max_length:
            max_length = right - left + 1
            max_substring = s[left:right+1]
    return max_substring",longest_substring_without_repeating_characters,"[assert longest_substring_without_repeating_characters(""pwwkew"")==""wke"", assert longest_substring_without_repeating_characters(""bbbbb"")==""b"", assert longest_substring_without_repeating_characters(""abcabcbb"")==""abc""]"
72740153081,Write a function to find the largest continuous sum in an array.,"```python
def max_continuous_sum(arr):
    max_sum = current_sum = arr[0]
    for num in arr[1:]:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    return max_sum
```","def max_continuous_sum(arr):
    max_sum = current_sum = arr[0]
    for num in arr[1:]:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    return max_sum","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a function to find the largest continuous sum in an array.<|im_end|>
<|im_start|>assistant
",0.03872938043084638,0.6524703502655029,-0.0,0.14454131648377738,0.9815550364297012,0.6416372656822205,0.07128810095167573,0.9999999989723337,0.9999999989723337,0.9999999403953552,58,0.0,0.0,0.0,-0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def largest_continuous_sum(arr):
    if len(arr) == 0:
        return 0

    max_sum = current_sum = arr[0]

    for num in arr[1:]:
        current_sum = max(current_sum + num, num)
        max_sum = max(max_sum, current_sum)

    return max_sum
```","def largest_continuous_sum(arr):
    if len(arr) == 0:
        return 0

    max_sum = current_sum = arr[0]

    for num in arr[1:]:
        current_sum = max(current_sum + num, num)
        max_sum = max(max_sum, current_sum)

    return max_sum",largest_continuous_sum,"[assert largest_continuous_sum([-1, 1]) == 1, assert largest_continuous_sum([1, 2, -1, 3, 4, -1]) == 9, assert largest_continuous_sum([1, 2, -1, 3, 4, 10, 10, -10, -1]) == 29]"
25369038617,"Write a function to check if a word is a palindrome.

A palindrome is a word that reads the same backward as forward, e.g., ""madam"" or ""racecar"".","```python
def is_palindrome(word):
    return word == word[::-1]
```","def is_palindrome(word):
    return word == word[::-1]","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a function to check if a word is a palindrome.

A palindrome is a word that reads the same backward as forward, e.g., ""madam"" or ""racecar"".<|im_end|>
<|im_start|>assistant
",0.0,-0.0,-0.0,0.0,1.0,1.0,0.0,1.0,1.0,1.0,19,0.0,0.0,-0.0,-0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def is_palindrome(word):
    return word == word[::-1]
```","def is_palindrome(word):
    return word == word[::-1]",is_palindrome,"[assert is_palindrome(""world"") == False, assert is_palindrome(""level"") == True, assert is_palindrome(""hello"") == False, assert is_palindrome(""madam"") == True, assert is_palindrome(""racecar"") == True]"
1281915040,Write a python function to find the total number of ways to reach the top of a staircase if you can climb either 1 or 2 steps at a time.,"```python
def count_ways(n):
    if n <= 1:
        return n
    a, b = 1, 1
    for _ in range(2, n + 1):
        a, b = b, a + b
    return b
```","def count_ways(n):
    if n <= 1:
        return n
    a, b = 1, 1
    for _ in range(2, n + 1):
        a, b = b, a + b
    return b","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a python function to find the total number of ways to reach the top of a staircase if you can climb either 1 or 2 steps at a time.<|im_end|>
<|im_start|>assistant
",0.05569885548998098,0.6900216341018677,-0.0,0.1721468330314686,0.9714178227987446,0.5395111441612244,0.094518675123322,0.9999999990228747,0.9999999990228747,0.9999999403953552,61,0.0,0.0,0.0,0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def climb_Stairs(n):
    a, b = 1, 2
    for _ in range(3, n + 1):
        a, b = b, a + b
    return b if n > 1 else n
```","def climb_Stairs(n):
    a, b = 1, 2
    for _ in range(3, n + 1):
        a, b = b, a + b
    return b if n > 1 else n",climb_Stairs,"[assert climb_Stairs(4) == 5, assert climb_Stairs(5) == 8, assert climb_Stairs(3) == 3]"
21969432676,Write a function to generate all possible permutations of a given list of numbers.,"```python
def permute(nums):
    def backtrack(start):
        if start == len(nums):
            result.append(nums[:])
        for i in range(start, len(nums)):
            nums[start], nums[i] = nums[i], nums[start]
            backtrack(start + 1)
            nums[start], nums[i] = nums[i], nums[start]
    
    result = []
    backtrack(0)
    return result
```","def permute(nums):
    def backtrack(start):
        if start == len(nums):
            result.append(nums[:])
        for i in range(start, len(nums)):
            nums[start], nums[i] = nums[i], nums[start]
            backtrack(start + 1)
            nums[start], nums[i] = nums[i], nums[start]
    
    result = []
    backtrack(0)
    return result","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a function to generate all possible permutations of a given list of numbers.<|im_end|>
<|im_start|>assistant
",0.027955591678619385,0.636696457862854,-0.0,0.11599428939953069,0.9882648552971325,0.6664035320281982,0.051277485291924614,1.0,1.0,1.0,87,0.0,0.0,-0.0,-0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def generate_permutations(nums):
    if len(nums) == 1:
        return [nums]
    permutations = []
    for i in range(len(nums)):
        current_num = nums[i]
        remaining_nums = nums[:i] + nums[i+1:]
        sub_permutations = generate_permutations(remaining_nums)
        for sub_permutation in sub_permutations:
            permutations.append([current_num] + sub_permutation)
    return permutations
```","def generate_permutations(nums):
    if len(nums) == 1:
        return [nums]
    permutations = []
    for i in range(len(nums)):
        current_num = nums[i]
        remaining_nums = nums[:i] + nums[i+1:]
        sub_permutations = generate_permutations(remaining_nums)
        for sub_permutation in sub_permutations:
            permutations.append([current_num] + sub_permutation)
    return permutations",generate_permutations,"[assert generate_permutations([1]) == [[1]], assert generate_permutations([1, 2]) == [[1, 2], [2, 1]], assert generate_permutations([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]]"
24485454232,Write a python function to find the Fibonacci sequence up to n numbers.,"```python
def fibonacci_sequence(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    
    fib_seq = [0, 1]
    for i in range(2, n):
        fib_seq.append(fib_seq[-1] + fib_seq[-2])
    
    return fib_seq
```","def fibonacci_sequence(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    
    fib_seq = [0, 1]
    for i in range(2, n):
        fib_seq.append(fib_seq[-1] + fib_seq[-2])
    
    return fib_seq","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a python function to find the Fibonacci sequence up to n numbers.<|im_end|>
<|im_start|>assistant
",0.03395695951249864,0.6863582134246826,-0.0,0.1406458943595741,0.9823780298233032,0.5581962466239929,0.07486172296633065,1.0000000013245476,1.0000000013245476,1.0,90,0.0,0.0,0.0,-0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def fibonacci(n):
  fib_sequence = [0, 1]
  while len(fib_sequence) < n:
    fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])
  return fib_sequence
```","def fibonacci(n):
  fib_sequence = [0, 1]
  while len(fib_sequence) < n:
    fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])
  return fib_sequence",fibonacci,"[assert fibonacci(10) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34], assert fibonacci(8) == [0, 1, 1, 2, 3, 5, 8, 13], assert fibonacci(5) == [0, 1, 1, 2, 3]]"
73965182520,"Write a function that checks if a given string is a palindrome, considering only alphanumeric characters and ignoring cases.","```python
def is_palindrome(s: str) -> bool:
    filtered_chars = [char.lower() for char in s if char.isalnum()]
    return filtered_chars == filtered_chars[::-1]
```","def is_palindrome(s: str) -> bool:
    filtered_chars = [char.lower() for char in s if char.isalnum()]
    return filtered_chars == filtered_chars[::-1]","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a function that checks if a given string is a palindrome, considering only alphanumeric characters and ignoring cases.<|im_end|>
<|im_start|>assistant
",0.015037299588669178,0.6466038823127747,-0.0,0.09745283943844012,0.9918919746265855,0.6513549089431763,0.05254601002121097,1.0,1.0,1.0,43,0.0,0.0,-0.0,-0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def is_palindrome(s: str) -> bool:
    s = ''.join([c.lower() for c in s if c.isalnum()])
    return s == s[::-1]
```","def is_palindrome(s: str) -> bool:
    s = ''.join([c.lower() for c in s if c.isalnum()])
    return s == s[::-1]",is_palindrome,"[assert is_palindrome("" "") == True, assert is_palindrome(""race a car"") == False, assert is_palindrome(""A man, a plan, a canal: Panama"") == True]"
15590275150,Create a python function to find the second largest number in a list of integers. Assume that the list always has at least two distinct numbers.,"```python
def find_second_largest(nums):
    first, second = float('-inf'), float('-inf')
    for num in nums:
        if num > first:
            first, second = num, first
        elif num > second and num != first:
            second = num
    return second
```","def find_second_largest(nums):
    first, second = float('-inf'), float('-inf')
    for num in nums:
        if num > first:
            first, second = num, first
        elif num > second and num != first:
            second = num
    return second","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Create a python function to find the second largest number in a list of integers. Assume that the list always has at least two distinct numbers.<|im_end|>
<|im_start|>assistant
",0.03705081756298358,0.6926391124725342,-0.0,0.14731388910852114,0.9792864561080933,0.5159376263618469,0.08648619572802939,0.9999999990830055,0.9999999990830055,0.9999999403953552,65,0.0,0.0,0.0,0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def find_second_largest(nums):
    max_num = second_max_num = float('-inf')
    for num in nums:
        if num > max_num:
            second_max_num = max_num
            max_num = num
        elif num > second_max_num and num != max_num:
            second_max_num = num
    return second_max_num
```","def find_second_largest(nums):
    max_num = second_max_num = float('-inf')
    for num in nums:
        if num > max_num:
            second_max_num = max_num
            max_num = num
        elif num > second_max_num and num != max_num:
            second_max_num = num
    return second_max_num",find_second_largest,"[assert find_second_largest([100, 200, 300]) == 200, assert find_second_largest([-1, -2, -3, -4, -5]) == -2, assert find_second_largest([10, 20, 20, 30, 40]) == 30, assert find_second_largest([5, 1, 2, 3, 4]) == 4, assert find_second_largest([1, 2, 3, 4, 5]) == 4]"
74992079799,Write a function to find the median of two sorted arrays.,"```python
def findMedianSortedArrays(nums1, nums2):
    m, n = len(nums1), len(nums2)
    if m > n:
        return findMedianSortedArrays(nums2, nums1)
    
    i_min, i_max, half_len = 0, m, (m + n + 1) // 2
    
    while i_min <= i_max:
        i = (i_min + i_max) // 2
        j = half_len - i
        
        if i < m and nums1[i] < nums2[j-1]:
            i_min = i + 1
        elif i > 0 and nums1[i-1] > nums2[j]:
            i_max = i - 1
        else:
            if i == 0: max_of_left = nums2[j-1]
            elif j == 0: max_of_left = nums1[i-1]
            else: max_of_left =","def findMedianSortedArrays(nums1, nums2):
    m, n = len(nums1), len(nums2)
    if m > n:
        return findMedianSortedArrays(nums2, nums1)
    
    i_min, i_max, half_len = 0, m, (m + n + 1) // 2
    
    while i_min <= i_max:
        i = (i_min + i_max) // 2
        j = half_len - i
        
        if i < m and nums1[i] < nums2[j-1]:
            i_min = i + 1
        elif i > 0 and nums1[i-1] > nums2[j]:
            i_max = i - 1
        else:
            if i == 0: max_of_left = nums2[j-1]
            elif j == 0: max_of_left = nums1[i-1]
            else: max_of_left =","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a function to find the median of two sorted arrays.<|im_end|>
<|im_start|>assistant
",0.023237501978874208,1.0687516927719116,-0.0,0.12899148073990369,0.98854635566473,0.43378424644470215,0.06641214579766587,1.0000000002980232,1.0000000002980232,0.9999999403953552,200,0.0,0.0,-0.0,0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def find_median(nums1, nums2):
    nums = sorted(nums1 + nums2)
    if len(nums) % 2 == 0:
        return (nums[len(nums)//2] + nums[len(nums)//2 - 1]) / 2
    else:
        return nums[len(nums)//2]
```","def find_median(nums1, nums2):
    nums = sorted(nums1 + nums2)
    if len(nums) % 2 == 0:
        return (nums[len(nums)//2] + nums[len(nums)//2 - 1]) / 2
    else:
        return nums[len(nums)//2]",find_median,"[assert find_median([1,2], [3,4])==2.5, assert find_median([1,3], [2])==2.0, assert find_median([1,3], [2,7])==2.5]"
6257817307,"Write a function that takes a string and a target character as input, and returns the number of times the target character appears in the string. The function should be case insensitive.","```python
def count_character_occurrences(s, target):
    return s.lower().count(target.lower())
```","def count_character_occurrences(s, target):
    return s.lower().count(target.lower())","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a function that takes a string and a target character as input, and returns the number of times the target character appears in the string. The function should be case insensitive.<|im_end|>
<|im_start|>assistant
",0.06594378274420033,0.6928980946540833,-0.0,0.1774351686941958,0.9660895078078561,0.5111590027809143,0.10557824181171914,0.9999999974084937,0.9999999974084937,0.9999999403953552,23,0.0,0.0,-0.0,-0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def count_char(string, target_char):
    string = string.lower()
    target_char = target_char.lower()
    return string.count(target_char)
```","def count_char(string, target_char):
    string = string.lower()
    target_char = target_char.lower()
    return string.count(target_char)",count_char,"[assert count_char(""HELLO WORLD"", ""w"") == 1, assert count_char(""MISSISSIPPI"", ""i"") == 4, assert count_char(""Mississippi"", ""s"") == 4, assert count_char(""Hello World"", ""o"") == 2]"
15526957597,Write a function that checks if a given string is an anagram of a palindrome.,"```python
def is_anagram_of_palindrome(s):
    s = s.replace("" "", """").lower()
    char_count = {}
    
    for char in s:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    
    odd_count = 0
    for count in char_count.values():
        if count % 2 != 0:
            odd_count += 1
    
    return odd_count <= 1
```","def is_anagram_of_palindrome(s):
    s = s.replace("" "", """").lower()
    char_count = {}
    
    for char in s:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    
    odd_count = 0
    for count in char_count.values():
        if count % 2 != 0:
            odd_count += 1
    
    return odd_count <= 1","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a function that checks if a given string is an anagram of a palindrome.<|im_end|>
<|im_start|>assistant
",0.02590557187795639,0.6931458711624146,-0.0,0.11868095302044303,0.9864370404527738,0.500798225402832,0.06878182626996358,1.0,1.0,1.0,104,0.0,0.0,-0.0,0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
from collections import Counter

def is_anagram_of_palindrome(s: str) -> bool:
    char_counts = Counter(s)
    odd_counts = sum(1 for count in char_counts.values() if count % 2 != 0)
    return odd_counts <= 1
```","from collections import Counter

def is_anagram_of_palindrome(s: str) -> bool:
    char_counts = Counter(s)
    odd_counts = sum(1 for count in char_counts.values() if count % 2 != 0)
    return odd_counts <= 1",is_anagram_of_palindrome,"[assert is_anagram_of_palindrome(""carerac"") == True, assert is_anagram_of_palindrome(""aabbc"") == True, assert is_anagram_of_palindrome(""aabbcc"") == True, assert is_anagram_of_palindrome(""abc"") == False, assert is_anagram_of_palindrome(""aabb"") == True]"
20004586671,Write a python function to find the maximum product of three numbers in a list. The function should return the maximum product.,"```python
def maximum_product(nums):
    nums.sort()
    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])
```","def maximum_product(nums):
    nums.sort()
    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a python function to find the maximum product of three numbers in a list. The function should return the maximum product.<|im_end|>
<|im_start|>assistant
",0.04423383739259508,0.5493885278701782,-0.0,0.14264045476107545,0.982092461321089,0.7614622712135315,0.05845536565391187,1.0,1.0,1.0,45,0.0,0.0,0.0,0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def max_product(nums):
    nums.sort()
    return max(nums[0]*nums[1]*nums[-1], nums[-1]*nums[-2]*nums[-3])
```","def max_product(nums):
    nums.sort()
    return max(nums[0]*nums[1]*nums[-1], nums[-1]*nums[-2]*nums[-3])",max_product,"[assert max_product([0, -1, 3, 100, -70, -5]) == 35000, assert max_product([-1, -2, -3, 4]) == 24, assert max_product([1, 2, 3]) == 6]"
44911643638,Write a python function to find the minimum number of swaps required to sort a list.,"```python
def min_swaps_to_sort(arr):
    n = len(arr)
    arrpos = [(val, idx) for idx, val in enumerate(arr)]
    arrpos.sort(key=lambda it: it[0])
    visited = [False] * n
    swaps = 0
    for i in range(n):
        if visited[i] or arrpos[i][1] == i:
            continue
        cycle_size = 0
        j = i
        while not visited[j]:
            visited[j] = True
            j = arrpos[j][1]
            cycle_size += 1
        if cycle_size > 0:
            swaps += (cycle_size - 1)
    return swaps
```","def min_swaps_to_sort(arr):
    n = len(arr)
    arrpos = [(val, idx) for idx, val in enumerate(arr)]
    arrpos.sort(key=lambda it: it[0])
    visited = [False] * n
    swaps = 0
    for i in range(n):
        if visited[i] or arrpos[i][1] == i:
            continue
        cycle_size = 0
        j = i
        while not visited[j]:
            visited[j] = True
            j = arrpos[j][1]
            cycle_size += 1
        if cycle_size > 0:
            swaps += (cycle_size - 1)
    return swaps","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a python function to find the minimum number of swaps required to sort a list.<|im_end|>
<|im_start|>assistant
",0.022315325721210203,0.9743970632553101,-0.0,0.1241386658277322,0.9889377256892374,0.544525146484375,0.06231948678303415,1.0,1.0,1.0,151,0.0,0.0,-0.0,-0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def min_swaps_to_sort(arr):
    n = len(arr)
    arr_pos = [*enumerate(arr)]
    arr_pos.sort(key=lambda it: it[1])
    vis = {k: False for k in range(n)}

    ans = 0
    for i in range(n):
        if vis[i] or arr_pos[i][0] == i:
            continue

        cycle_size = 0
        j = i
        while not vis[j]:
            vis[j] = True
            j = arr_pos[j][0]
            cycle_size += 1
        if cycle_size > 0:
            ans += (cycle_size - 1)
    return ans
```","def min_swaps_to_sort(arr):
    n = len(arr)
    arr_pos = [*enumerate(arr)]
    arr_pos.sort(key=lambda it: it[1])
    vis = {k: False for k in range(n)}

    ans = 0
    for i in range(n):
        if vis[i] or arr_pos[i][0] == i:
            continue

        cycle_size = 0
        j = i
        while not vis[j]:
            vis[j] = True
            j = arr_pos[j][0]
            cycle_size += 1
        if cycle_size > 0:
            ans += (cycle_size - 1)
    return ans",min_swaps_to_sort,"[assert min_swaps_to_sort([1, 3, 5, 2, 4, 6, 7]) == 3, assert min_swaps_to_sort([1, 5, 4, 3, 2]) == 2, assert min_swaps_to_sort([4, 3, 2, 1]) == 2]"
2175400675,"Write a function to find the maximum difference between two elements in a list, where the larger element comes after the smaller one.","```python
def max_difference(nums):
    if not nums or len(nums) < 2:
        return 0
    
    min_val = nums[0]
    max_diff = 0
    
    for num in nums[1:]:
        max_diff = max(max_diff, num - min_val)
        min_val = min(min_val, num)
    
    return max_diff
```","def max_difference(nums):
    if not nums or len(nums) < 2:
        return 0
    
    min_val = nums[0]
    max_diff = 0
    
    for num in nums[1:]:
        max_diff = max(max_diff, num - min_val)
        min_val = min(min_val, num)
    
    return max_diff","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a function to find the maximum difference between two elements in a list, where the larger element comes after the smaller one.<|im_end|>
<|im_start|>assistant
",0.02907834286931195,0.9362385869026184,-0.0,0.13722960010557178,0.98732614441763,0.5872457027435303,0.06308430710208197,1.0,1.0,1.0,79,0.0,0.0,-0.0,-0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def max_difference(lst):
    if len(lst) < 2:
        return 0
    min_val = lst[0]
    max_diff = 0
    for i in range(1, len(lst)):
        if lst[i] - min_val > max_diff:
            max_diff = lst[i] - min_val
        if lst[i] < min_val:
            min_val = lst[i]
    return max_diff
```","def max_difference(lst):
    if len(lst) < 2:
        return 0
    min_val = lst[0]
    max_diff = 0
    for i in range(1, len(lst)):
        if lst[i] - min_val > max_diff:
            max_diff = lst[i] - min_val
        if lst[i] < min_val:
            min_val = lst[i]
    return max_diff",max_difference,"[assert max_difference([1, 2, 3, 4, 5]) == 4, assert max_difference([7, 9, 5, 6, 3, 2]) == 2, assert max_difference([2, 3, 10, 2, 4, 8, 1]) == 8]"
40713914324,Write a python function to find the longest substring without repeating characters in a given string.,"```python
def longest_unique_substring(s):
    start = max_length = 0
    char_index_map = {}
    
    for i, char in enumerate(s):
        if char in char_index_map and char_index_map[char] >= start:
            start = char_index_map[char] + 1
        char_index_map[char] = i
        max_length = max(max_length, i - start + 1)
    
    return s[start:start + max_length]
```","def longest_unique_substring(s):
    start = max_length = 0
    char_index_map = {}
    
    for i, char in enumerate(s):
        if char in char_index_map and char_index_map[char] >= start:
            start = char_index_map[char] + 1
        char_index_map[char] = i
        max_length = max(max_length, i - start + 1)
    
    return s[start:start + max_length]","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a python function to find the longest substring without repeating characters in a given string.<|im_end|>
<|im_start|>assistant
",0.053243460077227966,0.9614355564117432,-0.0,0.17695455978616817,0.973476002914737,0.5334320664405823,0.09392445674834712,0.9999999993979328,0.9999999993979328,0.9999999403953552,99,0.0,0.0,-0.0,-0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def longest_substring_without_repeating_characters(s):
    char_map = {}
    left = 0
    result = """"
    for right in range(len(s)):
        if s[right] in char_map:
            left = max(left, char_map[s[right]] + 1)
        char_map[s[right]] = right
        if right - left + 1 > len(result):
            result = s[left:right+1]
    return result
```","def longest_substring_without_repeating_characters(s):
    char_map = {}
    left = 0
    result = """"
    for right in range(len(s)):
        if s[right] in char_map:
            left = max(left, char_map[s[right]] + 1)
        char_map[s[right]] = right
        if right - left + 1 > len(result):
            result = s[left:right+1]
    return result",longest_substring_without_repeating_characters,"[assert longest_substring_without_repeating_characters(""pwwkew"") == ""wke"", assert longest_substring_without_repeating_characters(""bbbbb"") == ""b"", assert longest_substring_without_repeating_characters(""abcabcbb"") == ""abc""]"
18779514445,"Write a function that takes a list of strings and returns a list of all the anagrams found in the list. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.","```python
def find_anagrams(word_list):
    from collections import defaultdict
    
    anagrams = defaultdict(list)
    
    for word in word_list:
        sorted_word = ''.join(sorted(word))
        anagrams[sorted_word].append(word)
    
    return [anagram_group for anagram_group in anagrams.values() if len(anagram_group) > 1]
```","def find_anagrams(word_list):
    from collections import defaultdict
    
    anagrams = defaultdict(list)
    
    for word in word_list:
        sorted_word = ''.join(sorted(word))
        anagrams[sorted_word].append(word)
    
    return [anagram_group for anagram_group in anagrams.values() if len(anagram_group) > 1]","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a function that takes a list of strings and returns a list of all the anagrams found in the list. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.<|im_end|>
<|im_start|>assistant
",0.02572674246934744,0.6296607851982117,-0.0,0.11425997979313442,0.9886763982283764,0.6762542128562927,0.053021951778716464,0.9999999992358379,0.9999999992358379,0.9999999403953552,78,0.0,0.0,0.0,-0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def anagrams(strs):
    anag = {}
    result = []
    for str in strs:
        s = ''.join(sorted(str))
        if (s in anag):
            anag[s].append(str)
        else:
            anag[s] = [str]
    for str in anag:
        if(len(anag[str])>1):
            result.extend(anag[str])
    return result
```","def anagrams(strs):
    anag = {}
    result = []
    for str in strs:
        s = ''.join(sorted(str))
        if (s in anag):
            anag[s].append(str)
        else:
            anag[s] = [str]
    for str in anag:
        if(len(anag[str])>1):
            result.extend(anag[str])
    return result",anagrams,"[assert anagrams([""a""]) == [], assert anagrams([""""]) == [], assert anagrams([""eat"", ""tea"", ""tan"", ""ate"", ""nat"", ""bat""]) == [""eat"", ""tea"", ""ate"", ""tan"", ""nat""]]"
70034082307,Write a python function to find the maximum number of consecutive 1's in the array if you can change at most k 0's to 1's.,"```python
def max_consecutive_ones(nums, k):
    left = 0
    max_length = 0
    zero_count = 0
    
    for right in range(len(nums)):
        if nums[right] == 0:
            zero_count += 1
        
        while zero_count > k:
            if nums[left] == 0:
                zero_count -= 1
            left += 1
        
        max_length = max(max_length, right - left + 1)
    
    return max_length
```","def max_consecutive_ones(nums, k):
    left = 0
    max_length = 0
    zero_count = 0
    
    for right in range(len(nums)):
        if nums[right] == 0:
            zero_count += 1
        
        while zero_count > k:
            if nums[left] == 0:
                zero_count -= 1
            left += 1
        
        max_length = max(max_length, right - left + 1)
    
    return max_length","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a python function to find the maximum number of consecutive 1's in the array if you can change at most k 0's to 1's.<|im_end|>
<|im_start|>assistant
",0.010010439048119641,0.40213802456855774,-0.0,0.05968567491173671,0.9967283743237136,0.8615509271621704,0.019590115873440905,0.9999999994531684,0.9999999994531684,0.9999999403953552,109,0.0,0.0,0.0,0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def max_ones(arr, k):
    left = 0
    max_len = 0
    zero_count = 0

    for right in range(len(arr)):
        if arr[right] == 0:
            zero_count += 1

        while zero_count > k:
            if arr[left] == 0:
                zero_count -= 1
            left += 1

        max_len = max(max_len, right - left + 1)

    return max_len
```","def max_ones(arr, k):
    left = 0
    max_len = 0
    zero_count = 0

    for right in range(len(arr)):
        if arr[right] == 0:
            zero_count += 1

        while zero_count > k:
            if arr[left] == 0:
                zero_count -= 1
            left += 1

        max_len = max(max_len, right - left + 1)

    return max_len",max_ones,"[assert max_ones([1,1,0,1], 1) == 4, assert max_ones([0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], 3) == 10, assert max_ones([1,1,1,0,0,0,1,1,1,1,0], 2) == 6]"
74061132546,Write a python function to find the most frequent character in a string and return its count.,"```python
def most_frequent_char_count(s):
    from collections import Counter
    char_count = Counter(s)
    if not char_count:
        return 0
    max_count = max(char_count.values())
    return max_count
```","def most_frequent_char_count(s):
    from collections import Counter
    char_count = Counter(s)
    if not char_count:
        return 0
    max_count = max(char_count.values())
    return max_count","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Write a python function to find the most frequent character in a string and return its count.<|im_end|>
<|im_start|>assistant
",0.04481294692731371,1.2020626068115234,-0.0,0.1855662077413035,0.9831941665387621,0.5073568820953369,0.07382128103386482,1.0,1.0,1.0,51,0.0,0.0,-0.0,-0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
def frequent_char(s):
    max_count = 0
    max_char = ''
    char_count = {}
    for c in s:
        if c in char_count:
            char_count[c] += 1
        else:
            char_count[c] = 1
        if char_count[c] > max_count:
            max_count = char_count[c]
            max_char = c
    return max_count
```","def frequent_char(s):
    max_count = 0
    max_char = ''
    char_count = {}
    for c in s:
        if c in char_count:
            char_count[c] += 1
        else:
            char_count[c] = 1
        if char_count[c] > max_count:
            max_count = char_count[c]
            max_char = c
    return max_count",frequent_char,"[assert frequent_char(""aabbccddeeffgghh"") == 2, assert frequent_char(""python programming"") == 2, assert frequent_char(""hello world"") == 3]"
6536870388,Create a function in Python that takes a list of positive integers as input and returns the maximum product that can be achieved by multiplying any three numbers from the list. Note that the list must contain at least three integers.,"```python
def max_product_of_three(nums):
    nums.sort()
    n = len(nums)
    return max(nums[0] * nums[1] * nums[n-1], nums[n-3] * nums[n-2] * nums[n-1])
```","def max_product_of_three(nums):
    nums.sort()
    n = len(nums)
    return max(nums[0] * nums[1] * nums[n-1], nums[n-3] * nums[n-2] * nums[n-1])","<|im_start|>system
You are a skilled Python programmer. Write clean, working code without comments or explanations. Focus only on solving the problem correctly.<|im_end|>
<|im_start|>user
Write a Python function to solve this problem. Provide only the function code without comments or explanations:

Create a function in Python that takes a list of positive integers as input and returns the maximum product that can be achieved by multiplying any three numbers from the list. Note that the list must contain at least three integers.<|im_end|>
<|im_start|>assistant
",0.026612351860916407,0.6256712675094604,-0.0,0.1147152459326698,0.988645378957715,0.6815819144248962,0.05109216976368573,1.0,1.0,1.0,57,0.0,0.0,0.0,0.0,1.0,1.0,"Here is the code to solve this problem: 
```python
from typing import List

def max_product(nums: List[int]) -> int:
    # Sort the list in ascending order
    nums.sort()
    # The maximum product can be either:
    # (1) The product of the three largest numbers
    # or (2) The product of the two smallest numbers (which could be negative) and the largest number
    return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])
```","from typing import List

def max_product(nums: List[int]) -> int:
    # Sort the list in ascending order
    nums.sort()
    # The maximum product can be either:
    # (1) The product of the three largest numbers
    # or (2) The product of the two smallest numbers (which could be negative) and the largest number
    return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])",max_product,"[assert max_product([5, 5, 5, 5]) == 125, assert max_product([7, 6, 5, 4, 3, 2, 1]) == 210, assert max_product([1, 2, 3, 4]) == 24]"
